!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	libSrc/makefile	/^AR = $(PLATFORM)ar$/;"	m
AS	libSrc/makefile	/^AS = $(PLATFORM)as$/;"	m
BlockInfo	install/include/types.h	/^}BlockInfo;$/;"	t	typeref:struct:__anon1
BlockInfo	libSrc/types.h	/^}BlockInfo;$/;"	t	typeref:struct:__anon4
BufferInfo	install/include/types.h	/^}BufferInfo;$/;"	t	typeref:struct:_BufferInfo
BufferInfo	libSrc/types.h	/^}BufferInfo;$/;"	t	typeref:struct:_BufferInfo
CC	libSrc/makefile	/^CC = $(PLATFORM)gcc$/;"	m
CC	test/makefile	/^CC = $(PLATFORM)gcc$/;"	m
CCSRC	libSrc/makefile	/^CCSRC = $(shell find $(DIR) -name "*.cc")$/;"	m
CFLAGS	libSrc/makefile	/^CFLAGS = $(CXXFLAGS) -std=gnu99 $(MACRO)$/;"	m
CFLAGS	test/makefile	/^CFLAGS = $(CXXFLAGS) -std=gnu99 $(MACRO)$/;"	m
CHAIN_SIZE	libSrc/types.h	37;"	d
CSRC	libSrc/makefile	/^CSRC = $(shell find $(DIR) -name "*.c")$/;"	m
CSRC	test/makefile	/^CSRC := $(shell find $(DIR) -name "*.c")$/;"	m
CXXFLAGS	libSrc/makefile	/^CXXFLAGS = -Werror -Wall -g -Wunused -Wsign-compare -Wunreachable-code -DDEBUG_SYS_INFO -fPIC $/;"	m
CXXFLAGS	test/makefile	/^CXXFLAGS = -Werror -Wall -g -Wunused -Wsign-compare -Wunreachable-code -DDEBUG_SYS_INFO $/;"	m
CXXSRC	libSrc/makefile	/^CXXSRC = $(shell find $(DIR) -name "*.cpp")$/;"	m
CXXSRC	test/makefile	/^CXXSRC = $(shell find $(DIR) -name "*.cpp")$/;"	m
CreateChain	libSrc/base/chain/chain.cpp	/^RecvData *CreateChain(const int len)$/;"	f	namespace:peace::base	signature:(const int len)
CreateChain	libSrc/base/chain/chain.h	/^	RecvData *CreateChain(const int len);$/;"	p	namespace:peace::base	signature:(const int len)
DIR	libSrc/makefile	/^DIR = .\/$/;"	m
DIR	test/makefile	/^DIR = .\/$/;"	m
EPOLL_MAX_EVENT	libSrc/types.h	39;"	d
EXE	test/makefile	/^EXE=".\/test"$/;"	m
Epollop	libSrc/types.h	/^}Epollop;$/;"	t	typeref:struct:__anon3
GetHeadChain	libSrc/base/chain/chain.cpp	/^RecvData *GetHeadChain(RecvData **dst)$/;"	f	namespace:peace::base	signature:(RecvData **dst)
GetHeadChain	libSrc/base/chain/chain.h	/^	RecvData *GetHeadChain(RecvData **dst);$/;"	p	namespace:peace::base	signature:(RecvData **dst)
INC	libSrc/makefile	/^INC = -I.\/$/;"	m
INCLUDES	test/makefile	/^INCLUDES = -I..\/install\/include$/;"	m
InsertHead	libSrc/base/chain/chain.cpp	/^void InsertHead(RecvData **dst, RecvData *src)$/;"	f	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
InsertHead	libSrc/base/chain/chain.h	/^	void InsertHead(RecvData **dst, RecvData *src);$/;"	p	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
InsertTail	libSrc/base/chain/chain.cpp	/^void InsertTail(RecvData **dst, RecvData *src)$/;"	f	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
InsertTail	libSrc/base/chain/chain.h	/^	void InsertTail(RecvData **dst, RecvData *src);$/;"	p	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
InsertTailEx	libSrc/base/chain/chain.cpp	/^void InsertTailEx(RecvData **dst, RecvData *src, RecvData **dstLast)$/;"	f	namespace:peace::base	signature:(RecvData **dst, RecvData *src, RecvData **dstLast)
InsertTailEx	libSrc/base/chain/chain.h	/^	void InsertTailEx(RecvData **dst, RecvData *src, RecvData **dstLast);$/;"	p	namespace:peace::base	signature:(RecvData **dst, RecvData *src, RecvData **dstLast)
LDFLAGS	libSrc/makefile	/^LDFLAGS	= $/;"	m
LDFLAGS	test/makefile	/^LDFLAGS	=$/;"	m
LIBS	libSrc/makefile	/^LIBS = -lz -lpthread$/;"	m
LIBS	test/makefile	/^LIBS = ..\/install\/bin\/libpeace.so$/;"	m
LOGD	install/include/types.h	54;"	d
LOGD	libSrc/types.h	87;"	d
MACRO	libSrc/makefile	/^MACRO = $/;"	m
NetBase	libSrc/net/base/netBase.cpp	/^NetBase::NetBase()$/;"	f	class:peace::net::NetBase	signature:()
NetBase	libSrc/net/base/netBase.h	/^	NetBase();$/;"	p	class:peace::net::NetBase	access:public	signature:()
NetBase	libSrc/net/base/netBase.h	/^class NetBase$/;"	c	namespace:peace::net
NetType	libSrc/net/base/netBase.h	/^	}NetType;$/;"	t	class:peace::net::NetBase	typeref:enum:peace::net::NetBase::__anon2	access:public
OBJS	libSrc/makefile	/^OBJS := $(CSRC:%.c=%.o) $(CXXSRC:%.cc=%.o) $(SSRC:%.S=%.o) $(sSRC:%.s=%.o) $(CCSRC:%.cpp=%.o)$/;"	m
OBJS	test/makefile	/^OBJS := $(CSRC:%.c=%.o) $(CXXSRC:%.cpp=%.o)$/;"	m
QueueInit	libSrc/base/queue/queue.cpp	/^int QueueInit(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)
QueueInit	libSrc/base/queue/queue.h	/^int QueueInit(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)
QueuePop	libSrc/base/queue/queue.cpp	/^int QueuePop(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut)
QueuePop	libSrc/base/queue/queue.h	/^int QueuePop(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut)
QueuePopInternal	libSrc/base/queue/queue.cpp	/^int QueuePopInternal(BlockInfo *pBlockInfo, const T& pFunc, void* arg)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg)
QueuePopInternal	libSrc/base/queue/queue.h	/^int QueuePopInternal(BlockInfo *pBlockInfo, const T& pFunc, void* arg);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg)
QueuePush	libSrc/base/queue/queue.cpp	/^int QueuePush(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)
QueuePush	libSrc/base/queue/queue.h	/^int QueuePush(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)
RecoveryChain	libSrc/base/chain/chain.cpp	/^void RecoveryChain(RecvData *src, RecvData *recvDataUdp, pthread_mutex_t LockChain)$/;"	f	namespace:peace::base	signature:(RecvData *src, RecvData *recvDataUdp, pthread_mutex_t LockChain)
RecoveryChain	libSrc/base/chain/chain.h	/^	void RecoveryChain(RecvData *src, RecvData *recvDataUdp, pthread_mutex_t LockChain);$/;"	p	namespace:peace::base	signature:(RecvData *src, RecvData *recvDataUdp, pthread_mutex_t LockChain)
RecvData	libSrc/types.h	/^}RecvData;$/;"	t	typeref:struct:_recvData
ReleaseChain	libSrc/base/chain/chain.cpp	/^void ReleaseChain(RecvData **ppHead)$/;"	f	namespace:peace::base	signature:(RecvData **ppHead)
ReleaseChain	libSrc/base/chain/chain.h	/^	void ReleaseChain(RecvData **ppHead);$/;"	p	namespace:peace::base	signature:(RecvData **ppHead)
SSRC	libSrc/makefile	/^SSRC = $(shell find $(DIR) -name "*.S")$/;"	m
SaveFile	libSrc/base/file/simpleSaveFile.h	/^class SaveFile$/;"	c	namespace:peace::base
SaveFileFpMap	libSrc/base/file/simpleSaveFile.h	/^typedef std::map<const char*, void*> SaveFileFpMap;$/;"	t	namespace:peace::base
TARGET_BIN	libSrc/makefile	/^TARGET_BIN = .\/peace $/;"	m
TARGET_LIB	libSrc/makefile	/^TARGET_LIB = .\/libpeace.a$/;"	m
TARGET_SO	libSrc/makefile	/^TARGET_SO = .\/libpeace.so$/;"	m
THREAD_STACK_SIZE_LARGE	libSrc/types.h	34;"	d
THREAD_STACK_SIZE_MIDDLE	libSrc/types.h	33;"	d
THREAD_STACK_SIZE_SMALL	libSrc/types.h	32;"	d
TcpBusinessDealFuncType	libSrc/types.h	/^typedef int (*TcpBusinessDealFuncType)(const unsigned char *data, const int dataSize, const int sock);$/;"	t
UDP_BUF_SIZE	libSrc/types.h	36;"	d
Udp	libSrc/net/udp/udp.cpp	/^Udp::Udp()$/;"	f	class:peace::net::Udp	signature:()
Udp	libSrc/net/udp/udp.h	/^	Udp();$/;"	p	class:peace::net::Udp	access:public	signature:()
Udp	libSrc/net/udp/udp.h	/^class Udp : public NetBase  $/;"	c	namespace:peace::net	inherits:NetBase
UdpBusinessDealFuncType	libSrc/types.h	/^typedef int (*UdpBusinessDealFuncType)(const unsigned char *data, const int dataSize, const struct sockaddr_in &peerAddr);$/;"	t
UdpClient	libSrc/net/udp/udpClient.h	/^class UdpClient : public Udp $/;"	c	namespace:peace::net	inherits:Udp
UdpServer	libSrc/net/udp/udpServer.cpp	/^UdpServer::UdpServer()$/;"	f	class:peace::net::UdpServer	signature:()
UdpServer	libSrc/net/udp/udpServer.h	/^	UdpServer();$/;"	p	class:peace::net::UdpServer	access:public	signature:()
UdpServer	libSrc/net/udp/udpServer.h	/^class UdpServer : public Udp   $/;"	c	namespace:peace::net	inherits:Udp
UdpUserType	libSrc/types.h	/^}UdpUserType;$/;"	t	typeref:enum:__anon5
XX	libSrc/makefile	/^XX = $(PLATFORM)g++$/;"	m
XX	test/makefile	/^XX = $(PLATFORM)g++$/;"	m
_BufferInfo	install/include/types.h	/^typedef struct _BufferInfo $/;"	s
_BufferInfo	libSrc/types.h	/^typedef struct _BufferInfo $/;"	s
_BufferInfo::nFlag	install/include/types.h	/^        int nFlag;$/;"	m	struct:_BufferInfo	access:public
_BufferInfo::nFlag	libSrc/types.h	/^        int nFlag;$/;"	m	struct:_BufferInfo	access:public
_BufferInfo::nSize	install/include/types.h	/^        int nSize;$/;"	m	struct:_BufferInfo	access:public
_BufferInfo::nSize	libSrc/types.h	/^        int nSize;$/;"	m	struct:_BufferInfo	access:public
_BufferInfo::pData	install/include/types.h	/^        unsigned char *pData;$/;"	m	struct:_BufferInfo	access:public
_BufferInfo::pData	libSrc/types.h	/^        unsigned char *pData;$/;"	m	struct:_BufferInfo	access:public
_BufferInfo::pNext	install/include/types.h	/^        struct _BufferInfo *pNext;$/;"	m	struct:_BufferInfo	typeref:struct:_BufferInfo::_BufferInfo	access:public
_BufferInfo::pNext	libSrc/types.h	/^        struct _BufferInfo *pNext;$/;"	m	struct:_BufferInfo	typeref:struct:_BufferInfo::_BufferInfo	access:public
_LockChain	libSrc/net/udp/udp.h	/^	pthread_mutex_t _LockChain;$/;"	m	class:peace::net::Udp	access:private
_LockData	libSrc/net/udp/udp.h	/^	pthread_mutex_t _LockData;$/;"	m	class:peace::net::Udp	access:private
_LockSend	libSrc/net/udp/udp.h	/^	pthread_mutex_t _LockSend;$/;"	m	class:peace::net::Udp	access:private
_PEACE_BASE_BASE_H_	libSrc/base/base.h	2;"	d
_PEACE_BASE_CHAIN_CHAIN_H_	libSrc/base/chain/chain.h	2;"	d
_PEACE_BASE_FILE_FILE_H_	libSrc/base/file/file.h	2;"	d
_PEACE_BASE_FILE_SIMPLE_SAVE_FILE_H_	libSrc/base/file/simpleSaveFile.h	2;"	d
_PEACE_BASE_QUEUE_QUEUE_H_	libSrc/base/queue/queue.h	2;"	d
_PEACE_BASE_THREAD_THREAD_H_	libSrc/base/thread/thread.h	2;"	d
_PEACE_NET_BASE_NET_BASE_H_	libSrc/net/base/netBase.h	2;"	d
_PEACE_NET_NET_H_	libSrc/net/net.h	2;"	d
_PEACE_NET_UDP_UDP_CLIENT_H_	libSrc/net/udp/udpClient.h	2;"	d
_PEACE_NET_UDP_UDP_H_	libSrc/net/udp/udp.h	2;"	d
_PEACE_NET_UDP_UDP_SERVER_H_	libSrc/net/udp/udpServer.h	2;"	d
_PEACE_PEACE_H_	libSrc/peace.h	2;"	d
_PEACE_PEACE_INTERFACE_H_	install/include/peaceInterface.h	2;"	d
_PEACE_PEACE_INTERFACE_H_	libSrc/peaceInterface.h	2;"	d
_PEACE_TYPES_H_	install/include/types.h	2;"	d
_PEACE_TYPES_H_	libSrc/types.h	2;"	d
__anon1::m_Lock	install/include/types.h	/^        pthread_mutex_t m_Lock;$/;"	m	struct:__anon1	access:public
__anon1::m_Pop	install/include/types.h	/^        BufferInfo *m_Pop;$/;"	m	struct:__anon1	access:public
__anon1::m_Push	install/include/types.h	/^        BufferInfo *m_Push;$/;"	m	struct:__anon1	access:public
__anon1::m_Semaphore	install/include/types.h	/^        sem_t m_Semaphore;$/;"	m	struct:__anon1	access:public
__anon1::m_nDataSize	install/include/types.h	/^        int m_nDataSize;$/;"	m	struct:__anon1	access:public
__anon1::m_nInfoSize	install/include/types.h	/^        int m_nInfoSize;$/;"	m	struct:__anon1	access:public
__anon1::m_pCurr	install/include/types.h	/^        unsigned char *m_pCurr;$/;"	m	struct:__anon1	access:public
__anon1::m_pData	install/include/types.h	/^        unsigned char *m_pData;$/;"	m	struct:__anon1	access:public
__anon1::m_pInfo	install/include/types.h	/^        BufferInfo *m_pInfo;$/;"	m	struct:__anon1	access:public
__anon3::epfd	libSrc/types.h	/^	int epfd;$/;"	m	struct:__anon3	access:public
__anon3::events	libSrc/types.h	/^	struct epoll_event events[EPOLL_MAX_EVENT + 1];$/;"	m	struct:__anon3	typeref:struct:__anon3::epoll_event	access:public
__anon3::nevents	libSrc/types.h	/^	int nevents;$/;"	m	struct:__anon3	access:public
__anon4::m_Lock	libSrc/types.h	/^        pthread_mutex_t m_Lock;$/;"	m	struct:__anon4	access:public
__anon4::m_Pop	libSrc/types.h	/^        BufferInfo *m_Pop;$/;"	m	struct:__anon4	access:public
__anon4::m_Push	libSrc/types.h	/^        BufferInfo *m_Push;$/;"	m	struct:__anon4	access:public
__anon4::m_Semaphore	libSrc/types.h	/^        sem_t m_Semaphore;$/;"	m	struct:__anon4	access:public
__anon4::m_nDataSize	libSrc/types.h	/^        int m_nDataSize;$/;"	m	struct:__anon4	access:public
__anon4::m_nInfoSize	libSrc/types.h	/^        int m_nInfoSize;$/;"	m	struct:__anon4	access:public
__anon4::m_pCurr	libSrc/types.h	/^        unsigned char *m_pCurr;$/;"	m	struct:__anon4	access:public
__anon4::m_pData	libSrc/types.h	/^        unsigned char *m_pData;$/;"	m	struct:__anon4	access:public
__anon4::m_pInfo	libSrc/types.h	/^        BufferInfo *m_pInfo;$/;"	m	struct:__anon4	access:public
_bufServer	libSrc/net/udp/udp.cpp	/^void Udp::_bufServer()$/;"	f	class:peace::net::Udp	signature:()
_bufServer	libSrc/net/udp/udp.h	/^    void _bufServer();$/;"	p	class:peace::net::Udp	access:public	signature:()
_bufServerPid	libSrc/net/udp/udp.h	/^	pthread_t _bufServerPid;$/;"	m	class:peace::net::Udp	access:private
_chainSize	libSrc/net/base/netBase.h	/^	int _chainSize;$/;"	m	class:peace::net::NetBase	access:public
_fp	libSrc/base/file/simpleSaveFile.h	/^	FILE * _fp;$/;"	m	class:peace::base::SaveFile	access:private
_isRunning	libSrc/net/udp/udp.h	/^	bool _isRunning;	$/;"	m	class:peace::net::Udp	access:private
_lockSemFinishInit	libSrc/net/udp/udp.h	/^	bool _lockSemFinishInit;$/;"	m	class:peace::net::Udp	access:private
_myPort	libSrc/net/udp/udp.h	/^	int _myPort;$/;"	m	class:peace::net::Udp	access:private
_orgPeerAddr	libSrc/net/udp/udp.h	/^	struct sockaddr_in _orgPeerAddr;$/;"	m	class:peace::net::Udp	typeref:struct:peace::net::Udp::sockaddr_in	access:private
_recvData	libSrc/types.h	/^typedef struct _recvData$/;"	s
_recvData::addr	libSrc/types.h	/^	struct sockaddr_in addr;$/;"	m	struct:_recvData	typeref:struct:_recvData::sockaddr_in	access:public
_recvData::buf	libSrc/types.h	/^	unsigned char buf[UDP_BUF_SIZE];$/;"	m	struct:_recvData	access:public
_recvData::count	libSrc/types.h	/^	int count;$/;"	m	struct:_recvData	access:public
_recvData::pNext	libSrc/types.h	/^	struct _recvData *pNext;$/;"	m	struct:_recvData	typeref:struct:_recvData::_recvData	access:public
_recvDataBuf	libSrc/net/udp/udp.h	/^	RecvData *_recvDataBuf;$/;"	m	class:peace::net::Udp	access:private
_recvDataBufLast	libSrc/net/udp/udp.h	/^	RecvData *_recvDataBufLast;$/;"	m	class:peace::net::Udp	access:private
_recvDataUdp	libSrc/net/udp/udp.h	/^	RecvData *_recvDataUdp;$/;"	m	class:peace::net::Udp	access:private
_recvServer	libSrc/net/udp/udp.cpp	/^void Udp::_recvServer()$/;"	f	class:peace::net::Udp	signature:()
_recvServer	libSrc/net/udp/udp.h	/^    void _recvServer();$/;"	p	class:peace::net::Udp	access:public	signature:()
_recvServerPid	libSrc/net/udp/udp.h	/^	pthread_t _recvServerPid;$/;"	m	class:peace::net::Udp	access:private
_sock	libSrc/net/udp/udp.h	/^	int _sock;$/;"	m	class:peace::net::Udp	access:private
_taskSem	libSrc/net/udp/udp.h	/^	sem_t _taskSem;$/;"	m	class:peace::net::Udp	access:private
_tcpBusinessDealFunc	libSrc/net/base/netBase.h	/^	TcpBusinessDealFuncType _tcpBusinessDealFunc;$/;"	m	class:peace::net::NetBase	access:public
_udpBusinessDealFunc	libSrc/net/base/netBase.h	/^	UdpBusinessDealFuncType _udpBusinessDealFunc;$/;"	m	class:peace::net::NetBase	access:public
addr	libSrc/types.h	/^	struct sockaddr_in addr;$/;"	m	struct:_recvData	typeref:struct:_recvData::sockaddr_in	access:public
base	libSrc/base/base.h	/^namespace base $/;"	n	namespace:peace
base	libSrc/base/chain/chain.cpp	/^namespace base $/;"	n	namespace:peace	file:
base	libSrc/base/chain/chain.h	/^namespace base $/;"	n	namespace:peace
base	libSrc/base/file/file.cpp	/^namespace base $/;"	n	namespace:peace	file:
base	libSrc/base/file/file.h	/^namespace base $/;"	n	namespace:peace
base	libSrc/base/file/simpleSaveFile.cpp	/^namespace base $/;"	n	namespace:peace	file:
base	libSrc/base/file/simpleSaveFile.h	/^namespace base $/;"	n	namespace:peace
base	libSrc/base/queue/queue.cpp	/^namespace base $/;"	n	namespace:peace	file:
base	libSrc/base/queue/queue.h	/^namespace base $/;"	n	namespace:peace
base	libSrc/base/thread/thread.cpp	/^namespace base$/;"	n	namespace:peace	file:
base	libSrc/base/thread/thread.h	/^namespace base $/;"	n	namespace:peace
base	libSrc/net/net.h	/^namespace base$/;"	n	namespace:peace
bindSocket	libSrc/net/udp/udp.cpp	/^int Udp::bindSocket(const UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::Udp	signature:(const UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
bindSocket	libSrc/net/udp/udp.h	/^	static int bindSocket(const UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize);$/;"	p	class:peace::net::Udp	access:public	signature:(const UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
buf	libSrc/types.h	/^	unsigned char buf[UDP_BUF_SIZE];$/;"	m	struct:_recvData	access:public
bufServer	libSrc/net/udp/udp.cpp	/^void* Udp::bufServer(void* arg)$/;"	f	class:peace::net::Udp	signature:(void* arg)
bufServer	libSrc/net/udp/udp.h	/^	static void* bufServer(void* arg);$/;"	p	class:peace::net::Udp	access:public	signature:(void* arg)
chainCreate	libSrc/peaceInterface.cpp	/^RecvData *chainCreate(const int len)$/;"	f	signature:(const int len)
chainCreate	libSrc/peaceInterface.h	/^RecvData *chainCreate(const int len);$/;"	p	signature:(const int len)
chainGetHead	libSrc/peaceInterface.cpp	/^RecvData *chainGetHead(RecvData **dst)$/;"	f	signature:(RecvData **dst)
chainGetHead	libSrc/peaceInterface.h	/^RecvData *chainGetHead(RecvData **dst);$/;"	p	signature:(RecvData **dst)
chainInsertHead	libSrc/peaceInterface.cpp	/^void chainInsertHead(RecvData **dst, RecvData *src)$/;"	f	signature:(RecvData **dst, RecvData *src)
chainInsertHead	libSrc/peaceInterface.h	/^void chainInsertHead(RecvData **dst, RecvData *src);$/;"	p	signature:(RecvData **dst, RecvData *src)
chainInsertTail	libSrc/peaceInterface.cpp	/^void chainInsertTail(RecvData **dst, RecvData *src)$/;"	f	signature:(RecvData **dst, RecvData *src)
chainInsertTail	libSrc/peaceInterface.h	/^void chainInsertTail(RecvData **dst, RecvData *src);$/;"	p	signature:(RecvData **dst, RecvData *src)
chainInsertTailEx	libSrc/peaceInterface.cpp	/^void chainInsertTailEx(RecvData **dst, RecvData *src, RecvData **dstLast)$/;"	f	signature:(RecvData **dst, RecvData *src, RecvData **dstLast)
chainInsertTailEx	libSrc/peaceInterface.h	/^void chainInsertTailEx(RecvData **dst, RecvData *src, RecvData **dstLast);$/;"	p	signature:(RecvData **dst, RecvData *src, RecvData **dstLast)
chainRecovery	libSrc/peaceInterface.cpp	/^void chainRecovery(RecvData *src, RecvData *recvDataUdp, pthread_mutex_t LockChain)$/;"	f	signature:(RecvData *src, RecvData *recvDataUdp, pthread_mutex_t LockChain)
chainRecovery	libSrc/peaceInterface.h	/^void chainRecovery(RecvData *src, RecvData *recvDataUdp, pthread_mutex_t LockChain);$/;"	p	signature:(RecvData *src, RecvData *recvDataUdp, pthread_mutex_t LockChain)
chainRelease	libSrc/peaceInterface.cpp	/^void chainRelease(RecvData **ppHead)$/;"	f	signature:(RecvData **ppHead)
chainRelease	libSrc/peaceInterface.h	/^void chainRelease(RecvData **ppHead);$/;"	p	signature:(RecvData **ppHead)
close	libSrc/base/file/simpleSaveFile.cpp	/^void SaveFile::close()$/;"	f	class:peace::base::SaveFile	signature:()
close	libSrc/base/file/simpleSaveFile.h	/^	void close();$/;"	p	class:peace::base::SaveFile	access:public	signature:()
count	libSrc/types.h	/^	int count;$/;"	m	struct:_recvData	access:public
create	libSrc/net/base/netBase.cpp	/^NetBase* NetBase::create(const NetType type)$/;"	f	class:peace::net::NetBase	signature:(const NetType type)
create	libSrc/net/base/netBase.h	/^	static NetBase* create(const NetType type);	$/;"	p	class:peace::net::NetBase	access:public	signature:(const NetType type)
eNetTcpClient	libSrc/net/base/netBase.h	/^		eNetTcpClient,$/;"	e	enum:peace::net::NetBase::__anon2
eNetTcpServer	libSrc/net/base/netBase.h	/^		eNetTcpServer,$/;"	e	enum:peace::net::NetBase::__anon2
eNetUdpClient	libSrc/net/base/netBase.h	/^		eNetUdpClient,$/;"	e	enum:peace::net::NetBase::__anon2
eNetUdpServer	libSrc/net/base/netBase.h	/^		eNetUdpServer,$/;"	e	enum:peace::net::NetBase::__anon2
eUdpClient	libSrc/types.h	/^	eUdpClient,$/;"	e	enum:__anon5
eUdpServer	libSrc/types.h	/^	eUdpServer,$/;"	e	enum:__anon5
epfd	libSrc/types.h	/^	int epfd;$/;"	m	struct:__anon3	access:public
events	libSrc/types.h	/^	struct epoll_event events[EPOLL_MAX_EVENT + 1];$/;"	m	struct:__anon3	typeref:struct:__anon3::epoll_event	access:public
exit	libSrc/net/base/netBase.h	/^	virtual void exit() = 0;$/;"	p	class:peace::net::NetBase	access:public	signature:()
exit	libSrc/net/udp/udp.cpp	/^void Udp::exit()$/;"	f	class:peace::net::Udp	signature:()
exit	libSrc/net/udp/udp.h	/^	void exit();$/;"	p	class:peace::net::Udp	access:public	signature:()
fileSimpleClose	install/include/peaceInterface.h	/^void fileSimpleClose(const char *fileAbsName);$/;"	p	signature:(const char *fileAbsName)
fileSimpleClose	libSrc/base/file/file.cpp	/^void fileSimpleClose(const char *fileAbsName)$/;"	f	namespace:peace::base	signature:(const char *fileAbsName)
fileSimpleClose	libSrc/base/file/file.h	/^void fileSimpleClose(const char *fileAbsName);$/;"	p	namespace:peace::base	signature:(const char *fileAbsName)
fileSimpleClose	libSrc/peaceInterface.cpp	/^void fileSimpleClose(const char *fileAbsName)$/;"	f	signature:(const char *fileAbsName)
fileSimpleClose	libSrc/peaceInterface.h	/^void fileSimpleClose(const char *fileAbsName);$/;"	p	signature:(const char *fileAbsName)
fileSimpleWrite	install/include/peaceInterface.h	/^void fileSimpleWrite(const unsigned char *data, const int size, const char *fileAbsName);$/;"	p	signature:(const unsigned char *data, const int size, const char *fileAbsName)
fileSimpleWrite	libSrc/base/file/file.cpp	/^void fileSimpleWrite(const unsigned char *data, const int size, const char *fileAbsName)$/;"	f	namespace:peace::base	signature:(const unsigned char *data, const int size, const char *fileAbsName)
fileSimpleWrite	libSrc/base/file/file.h	/^void fileSimpleWrite(const unsigned char *data, const int size, const char *fileAbsName);$/;"	p	namespace:peace::base	signature:(const unsigned char *data, const int size, const char *fileAbsName)
fileSimpleWrite	libSrc/peaceInterface.cpp	/^void fileSimpleWrite(const unsigned char *data, const int size, const char *fileAbsName)$/;"	f	signature:(const unsigned char *data, const int size, const char *fileAbsName)
fileSimpleWrite	libSrc/peaceInterface.h	/^void fileSimpleWrite(const unsigned char *data, const int size, const char *fileAbsName);$/;"	p	signature:(const unsigned char *data, const int size, const char *fileAbsName)
gUdpClientSelfPortRangeBegin	libSrc/types.h	/^static const int gUdpClientSelfPortRangeBegin = 40001;$/;"	v
gUdpClientSelfPortRangeEnd	libSrc/types.h	/^static const int gUdpClientSelfPortRangeEnd = 45000;$/;"	v
gUdpClientSockRecvBufSize	libSrc/types.h	/^static const int gUdpClientSockRecvBufSize = 128 * 1024;$/;"	v
gUdpClientSockSendBufSize	libSrc/types.h	/^static const int gUdpClientSockSendBufSize = 128 * 1024;$/;"	v
gUdpServerSockRecvBufSize	libSrc/types.h	/^static const int gUdpServerSockRecvBufSize = 128 * 1024;$/;"	v
gUdpServerSockSendBufSize	libSrc/types.h	/^static const int gUdpServerSockSendBufSize = 128 * 1024;$/;"	v
getObj	libSrc/base/file/simpleSaveFile.cpp	/^SaveFile* SaveFile::getObj(const char *fileName)$/;"	f	class:peace::base::SaveFile	signature:(const char *fileName)
getObj	libSrc/base/file/simpleSaveFile.h	/^	static SaveFile* getObj(const char *fileName); $/;"	p	class:peace::base::SaveFile	access:public	signature:(const char *fileName)
init	libSrc/net/base/netBase.h	/^	virtual int init() = 0;$/;"	p	class:peace::net::NetBase	access:public	signature:()
init	libSrc/net/udp/udp.cpp	/^int Udp::init()$/;"	f	class:peace::net::Udp	signature:()
init	libSrc/net/udp/udp.h	/^	int init();$/;"	p	class:peace::net::Udp	access:public	signature:()
m_Lock	install/include/types.h	/^        pthread_mutex_t m_Lock;$/;"	m	struct:__anon1	access:public
m_Lock	libSrc/types.h	/^        pthread_mutex_t m_Lock;$/;"	m	struct:__anon4	access:public
m_Pop	install/include/types.h	/^        BufferInfo *m_Pop;$/;"	m	struct:__anon1	access:public
m_Pop	libSrc/types.h	/^        BufferInfo *m_Pop;$/;"	m	struct:__anon4	access:public
m_Push	install/include/types.h	/^        BufferInfo *m_Push;$/;"	m	struct:__anon1	access:public
m_Push	libSrc/types.h	/^        BufferInfo *m_Push;$/;"	m	struct:__anon4	access:public
m_Semaphore	install/include/types.h	/^        sem_t m_Semaphore;$/;"	m	struct:__anon1	access:public
m_Semaphore	libSrc/types.h	/^        sem_t m_Semaphore;$/;"	m	struct:__anon4	access:public
m_nDataSize	install/include/types.h	/^        int m_nDataSize;$/;"	m	struct:__anon1	access:public
m_nDataSize	libSrc/types.h	/^        int m_nDataSize;$/;"	m	struct:__anon4	access:public
m_nInfoSize	install/include/types.h	/^        int m_nInfoSize;$/;"	m	struct:__anon1	access:public
m_nInfoSize	libSrc/types.h	/^        int m_nInfoSize;$/;"	m	struct:__anon4	access:public
m_pCurr	install/include/types.h	/^        unsigned char *m_pCurr;$/;"	m	struct:__anon1	access:public
m_pCurr	libSrc/types.h	/^        unsigned char *m_pCurr;$/;"	m	struct:__anon4	access:public
m_pData	install/include/types.h	/^        unsigned char *m_pData;$/;"	m	struct:__anon1	access:public
m_pData	libSrc/types.h	/^        unsigned char *m_pData;$/;"	m	struct:__anon4	access:public
m_pInfo	install/include/types.h	/^        BufferInfo *m_pInfo;$/;"	m	struct:__anon1	access:public
m_pInfo	libSrc/types.h	/^        BufferInfo *m_pInfo;$/;"	m	struct:__anon4	access:public
main	test/test.cpp	/^int main()$/;"	f	signature:()
mapFp	libSrc/base/file/simpleSaveFile.cpp	/^SaveFileFpMap mapFp;$/;"	m	namespace:peace::base	file:
nFlag	install/include/types.h	/^        int nFlag;$/;"	m	struct:_BufferInfo	access:public
nFlag	libSrc/types.h	/^        int nFlag;$/;"	m	struct:_BufferInfo	access:public
nSize	install/include/types.h	/^        int nSize;$/;"	m	struct:_BufferInfo	access:public
nSize	libSrc/types.h	/^        int nSize;$/;"	m	struct:_BufferInfo	access:public
net	libSrc/net/base/netBase.cpp	/^namespace net $/;"	n	namespace:peace	file:
net	libSrc/net/base/netBase.h	/^namespace net $/;"	n	namespace:peace
net	libSrc/net/udp/udp.cpp	/^namespace net $/;"	n	namespace:peace	file:
net	libSrc/net/udp/udp.h	/^namespace net $/;"	n	namespace:peace
net	libSrc/net/udp/udpClient.cpp	/^namespace net $/;"	n	namespace:peace	file:
net	libSrc/net/udp/udpClient.h	/^namespace net $/;"	n	namespace:peace
net	libSrc/net/udp/udpServer.cpp	/^namespace net $/;"	n	namespace:peace	file:
net	libSrc/net/udp/udpServer.h	/^namespace net $/;"	n	namespace:peace
netCreate	libSrc/peaceInterface.cpp	/^void* netCreate(const char *type)$/;"	f	signature:(const char *type)
netCreate	libSrc/peaceInterface.h	/^void* netCreate(const char *type);$/;"	p	signature:(const char *type)
netDestroy	libSrc/peaceInterface.cpp	/^void netDestroy(void *base)$/;"	f	signature:(void *base)
netDestroy	libSrc/peaceInterface.h	/^void netDestroy(void *base);$/;"	p	signature:(void *base)
netSetChainSize	libSrc/peaceInterface.cpp	/^int netSetChainSize(void *base, const int size) \/\/default value is CHAIN_SIZE$/;"	f	signature:(void *base, const int size)
netSetChainSize	libSrc/peaceInterface.h	/^int netSetChainSize(void *base, const int size); \/\/default value is CHAIN_SIZE$/;"	p	signature:(void *base, const int size)
netStart	libSrc/peaceInterface.cpp	/^int netStart(void*base, const char *ip, const int port)$/;"	f	signature:(void*base, const char *ip, const int port)
netStart	libSrc/peaceInterface.h	/^int netStart(void*base, const char *ip, const int port = 0);$/;"	p	signature:(void*base, const char *ip, const int port = 0)
netStop	libSrc/peaceInterface.cpp	/^int netStop(void *base)$/;"	f	signature:(void *base)
netStop	libSrc/peaceInterface.h	/^int netStop(void *base);$/;"	p	signature:(void *base)
nevents	libSrc/types.h	/^	int nevents;$/;"	m	struct:__anon3	access:public
open	libSrc/base/file/simpleSaveFile.cpp	/^void *SaveFile::open(const char *fileName)$/;"	f	class:peace::base::SaveFile	signature:(const char *fileName)
open	libSrc/base/file/simpleSaveFile.h	/^	void * open(const char *fileName);$/;"	p	class:peace::base::SaveFile	access:public	signature:(const char *fileName)
pData	install/include/types.h	/^        unsigned char *pData;$/;"	m	struct:_BufferInfo	access:public
pData	libSrc/types.h	/^        unsigned char *pData;$/;"	m	struct:_BufferInfo	access:public
pNext	install/include/types.h	/^        struct _BufferInfo *pNext;$/;"	m	struct:_BufferInfo	typeref:struct:_BufferInfo::_BufferInfo	access:public
pNext	libSrc/types.h	/^	struct _recvData *pNext;$/;"	m	struct:_recvData	typeref:struct:_recvData::_recvData	access:public
pNext	libSrc/types.h	/^        struct _BufferInfo *pNext;$/;"	m	struct:_BufferInfo	typeref:struct:_BufferInfo::_BufferInfo	access:public
peace	libSrc/base/base.h	/^namespace peace $/;"	n
peace	libSrc/base/chain/chain.cpp	/^namespace peace $/;"	n	file:
peace	libSrc/base/chain/chain.h	/^namespace peace $/;"	n
peace	libSrc/base/file/file.cpp	/^namespace peace $/;"	n	file:
peace	libSrc/base/file/file.h	/^namespace peace $/;"	n
peace	libSrc/base/file/simpleSaveFile.cpp	/^namespace peace $/;"	n	file:
peace	libSrc/base/file/simpleSaveFile.h	/^namespace peace $/;"	n
peace	libSrc/base/queue/queue.cpp	/^namespace peace $/;"	n	file:
peace	libSrc/base/queue/queue.h	/^namespace peace $/;"	n
peace	libSrc/base/thread/thread.cpp	/^namespace peace $/;"	n	file:
peace	libSrc/base/thread/thread.h	/^namespace peace $/;"	n
peace	libSrc/net/base/netBase.cpp	/^namespace peace $/;"	n	file:
peace	libSrc/net/base/netBase.h	/^namespace peace $/;"	n
peace	libSrc/net/net.h	/^namespace peace $/;"	n
peace	libSrc/net/udp/udp.cpp	/^namespace peace $/;"	n	file:
peace	libSrc/net/udp/udp.h	/^namespace peace $/;"	n
peace	libSrc/net/udp/udpClient.cpp	/^namespace peace $/;"	n	file:
peace	libSrc/net/udp/udpClient.h	/^namespace peace $/;"	n
peace	libSrc/net/udp/udpServer.cpp	/^namespace peace $/;"	n	file:
peace	libSrc/net/udp/udpServer.h	/^namespace peace $/;"	n
peace::base	libSrc/base/base.h	/^namespace base $/;"	n	namespace:peace
peace::base	libSrc/base/chain/chain.cpp	/^namespace base $/;"	n	namespace:peace	file:
peace::base	libSrc/base/chain/chain.h	/^namespace base $/;"	n	namespace:peace
peace::base	libSrc/base/file/file.cpp	/^namespace base $/;"	n	namespace:peace	file:
peace::base	libSrc/base/file/file.h	/^namespace base $/;"	n	namespace:peace
peace::base	libSrc/base/file/simpleSaveFile.cpp	/^namespace base $/;"	n	namespace:peace	file:
peace::base	libSrc/base/file/simpleSaveFile.h	/^namespace base $/;"	n	namespace:peace
peace::base	libSrc/base/queue/queue.cpp	/^namespace base $/;"	n	namespace:peace	file:
peace::base	libSrc/base/queue/queue.h	/^namespace base $/;"	n	namespace:peace
peace::base	libSrc/base/thread/thread.cpp	/^namespace base$/;"	n	namespace:peace	file:
peace::base	libSrc/base/thread/thread.h	/^namespace base $/;"	n	namespace:peace
peace::base	libSrc/net/net.h	/^namespace base$/;"	n	namespace:peace
peace::base::CreateChain	libSrc/base/chain/chain.cpp	/^RecvData *CreateChain(const int len)$/;"	f	namespace:peace::base	signature:(const int len)
peace::base::CreateChain	libSrc/base/chain/chain.h	/^	RecvData *CreateChain(const int len);$/;"	p	namespace:peace::base	signature:(const int len)
peace::base::GetHeadChain	libSrc/base/chain/chain.cpp	/^RecvData *GetHeadChain(RecvData **dst)$/;"	f	namespace:peace::base	signature:(RecvData **dst)
peace::base::GetHeadChain	libSrc/base/chain/chain.h	/^	RecvData *GetHeadChain(RecvData **dst);$/;"	p	namespace:peace::base	signature:(RecvData **dst)
peace::base::InsertHead	libSrc/base/chain/chain.cpp	/^void InsertHead(RecvData **dst, RecvData *src)$/;"	f	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
peace::base::InsertHead	libSrc/base/chain/chain.h	/^	void InsertHead(RecvData **dst, RecvData *src);$/;"	p	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
peace::base::InsertTail	libSrc/base/chain/chain.cpp	/^void InsertTail(RecvData **dst, RecvData *src)$/;"	f	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
peace::base::InsertTail	libSrc/base/chain/chain.h	/^	void InsertTail(RecvData **dst, RecvData *src);$/;"	p	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
peace::base::InsertTailEx	libSrc/base/chain/chain.cpp	/^void InsertTailEx(RecvData **dst, RecvData *src, RecvData **dstLast)$/;"	f	namespace:peace::base	signature:(RecvData **dst, RecvData *src, RecvData **dstLast)
peace::base::InsertTailEx	libSrc/base/chain/chain.h	/^	void InsertTailEx(RecvData **dst, RecvData *src, RecvData **dstLast);$/;"	p	namespace:peace::base	signature:(RecvData **dst, RecvData *src, RecvData **dstLast)
peace::base::QueueInit	libSrc/base/queue/queue.cpp	/^int QueueInit(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)
peace::base::QueueInit	libSrc/base/queue/queue.h	/^int QueueInit(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)
peace::base::QueuePop	libSrc/base/queue/queue.cpp	/^int QueuePop(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut)
peace::base::QueuePop	libSrc/base/queue/queue.h	/^int QueuePop(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut)
peace::base::QueuePopInternal	libSrc/base/queue/queue.cpp	/^int QueuePopInternal(BlockInfo *pBlockInfo, const T& pFunc, void* arg)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg)
peace::base::QueuePopInternal	libSrc/base/queue/queue.h	/^int QueuePopInternal(BlockInfo *pBlockInfo, const T& pFunc, void* arg);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg)
peace::base::QueuePush	libSrc/base/queue/queue.cpp	/^int QueuePush(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)
peace::base::QueuePush	libSrc/base/queue/queue.h	/^int QueuePush(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)
peace::base::RecoveryChain	libSrc/base/chain/chain.cpp	/^void RecoveryChain(RecvData *src, RecvData *recvDataUdp, pthread_mutex_t LockChain)$/;"	f	namespace:peace::base	signature:(RecvData *src, RecvData *recvDataUdp, pthread_mutex_t LockChain)
peace::base::RecoveryChain	libSrc/base/chain/chain.h	/^	void RecoveryChain(RecvData *src, RecvData *recvDataUdp, pthread_mutex_t LockChain);$/;"	p	namespace:peace::base	signature:(RecvData *src, RecvData *recvDataUdp, pthread_mutex_t LockChain)
peace::base::ReleaseChain	libSrc/base/chain/chain.cpp	/^void ReleaseChain(RecvData **ppHead)$/;"	f	namespace:peace::base	signature:(RecvData **ppHead)
peace::base::ReleaseChain	libSrc/base/chain/chain.h	/^	void ReleaseChain(RecvData **ppHead);$/;"	p	namespace:peace::base	signature:(RecvData **ppHead)
peace::base::SaveFile	libSrc/base/file/simpleSaveFile.h	/^class SaveFile$/;"	c	namespace:peace::base
peace::base::SaveFile::_fp	libSrc/base/file/simpleSaveFile.h	/^	FILE * _fp;$/;"	m	class:peace::base::SaveFile	access:private
peace::base::SaveFile::close	libSrc/base/file/simpleSaveFile.cpp	/^void SaveFile::close()$/;"	f	class:peace::base::SaveFile	signature:()
peace::base::SaveFile::close	libSrc/base/file/simpleSaveFile.h	/^	void close();$/;"	p	class:peace::base::SaveFile	access:public	signature:()
peace::base::SaveFile::getObj	libSrc/base/file/simpleSaveFile.cpp	/^SaveFile* SaveFile::getObj(const char *fileName)$/;"	f	class:peace::base::SaveFile	signature:(const char *fileName)
peace::base::SaveFile::getObj	libSrc/base/file/simpleSaveFile.h	/^	static SaveFile* getObj(const char *fileName); $/;"	p	class:peace::base::SaveFile	access:public	signature:(const char *fileName)
peace::base::SaveFile::open	libSrc/base/file/simpleSaveFile.cpp	/^void *SaveFile::open(const char *fileName)$/;"	f	class:peace::base::SaveFile	signature:(const char *fileName)
peace::base::SaveFile::open	libSrc/base/file/simpleSaveFile.h	/^	void * open(const char *fileName);$/;"	p	class:peace::base::SaveFile	access:public	signature:(const char *fileName)
peace::base::SaveFile::wr	libSrc/base/file/simpleSaveFile.cpp	/^void SaveFile::wr(const void *data, const int dataSize)$/;"	f	class:peace::base::SaveFile	signature:(const void *data, const int dataSize)
peace::base::SaveFile::wr	libSrc/base/file/simpleSaveFile.h	/^	void wr(const void *data, const int dataSize);$/;"	p	class:peace::base::SaveFile	access:public	signature:(const void *data, const int dataSize)
peace::base::SaveFile::~SaveFile	libSrc/base/file/simpleSaveFile.cpp	/^SaveFile::~SaveFile()$/;"	f	class:peace::base::SaveFile	signature:()
peace::base::SaveFile::~SaveFile	libSrc/base/file/simpleSaveFile.h	/^	~SaveFile();$/;"	p	class:peace::base::SaveFile	access:public	signature:()
peace::base::SaveFileFpMap	libSrc/base/file/simpleSaveFile.h	/^typedef std::map<const char*, void*> SaveFileFpMap;$/;"	t	namespace:peace::base
peace::base::fileSimpleClose	libSrc/base/file/file.cpp	/^void fileSimpleClose(const char *fileAbsName)$/;"	f	namespace:peace::base	signature:(const char *fileAbsName)
peace::base::fileSimpleClose	libSrc/base/file/file.h	/^void fileSimpleClose(const char *fileAbsName);$/;"	p	namespace:peace::base	signature:(const char *fileAbsName)
peace::base::fileSimpleWrite	libSrc/base/file/file.cpp	/^void fileSimpleWrite(const unsigned char *data, const int size, const char *fileAbsName)$/;"	f	namespace:peace::base	signature:(const unsigned char *data, const int size, const char *fileAbsName)
peace::base::fileSimpleWrite	libSrc/base/file/file.h	/^void fileSimpleWrite(const unsigned char *data, const int size, const char *fileAbsName);$/;"	p	namespace:peace::base	signature:(const unsigned char *data, const int size, const char *fileAbsName)
peace::base::mapFp	libSrc/base/file/simpleSaveFile.cpp	/^SaveFileFpMap mapFp;$/;"	m	namespace:peace::base	file:
peace::base::queuet2	libSrc/base/queue/queue.cpp	/^void queuet2()$/;"	f	namespace:peace::base	signature:()
peace::base::queuet2	libSrc/base/queue/queue.h	/^void queuet2();$/;"	p	namespace:peace::base	signature:()
peace::base::threadClose	libSrc/base/thread/thread.cpp	/^void threadClose(pthread_t &pid)$/;"	f	namespace:peace::base	signature:(pthread_t &pid)
peace::base::threadClose	libSrc/base/thread/thread.h	/^void threadClose(pthread_t &pid);$/;"	p	namespace:peace::base	signature:(pthread_t &pid)
peace::base::threadCreate	libSrc/base/thread/thread.cpp	/^int threadCreate(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size)
peace::base::threadCreate	libSrc/base/thread/thread.h	/^int threadCreate(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size);$/;"	p	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size)
peace::base::threadCreateLarge	libSrc/base/thread/thread.cpp	/^int threadCreateLarge(pthread_t &pid, void*(*thread_callback)(void*), void *arg)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
peace::base::threadCreateLarge	libSrc/base/thread/thread.h	/^int threadCreateLarge(pthread_t &pid, void*(*thread_callback)(void*), void *arg);$/;"	p	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
peace::base::threadCreateMiddle	libSrc/base/thread/thread.cpp	/^int threadCreateMiddle(pthread_t &pid, void*(*thread_callback)(void*), void *arg)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
peace::base::threadCreateMiddle	libSrc/base/thread/thread.h	/^int threadCreateMiddle(pthread_t &pid, void*(*thread_callback)(void*), void *arg);$/;"	p	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
peace::base::threadCreateSmall	libSrc/base/thread/thread.cpp	/^int threadCreateSmall(pthread_t &pid, void*(*thread_callback)(void*), void *arg)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
peace::base::threadCreateSmall	libSrc/base/thread/thread.h	/^int threadCreateSmall(pthread_t &pid, void*(*thread_callback)(void*), void *arg);$/;"	p	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
peace::net	libSrc/net/base/netBase.cpp	/^namespace net $/;"	n	namespace:peace	file:
peace::net	libSrc/net/base/netBase.h	/^namespace net $/;"	n	namespace:peace
peace::net	libSrc/net/udp/udp.cpp	/^namespace net $/;"	n	namespace:peace	file:
peace::net	libSrc/net/udp/udp.h	/^namespace net $/;"	n	namespace:peace
peace::net	libSrc/net/udp/udpClient.cpp	/^namespace net $/;"	n	namespace:peace	file:
peace::net	libSrc/net/udp/udpClient.h	/^namespace net $/;"	n	namespace:peace
peace::net	libSrc/net/udp/udpServer.cpp	/^namespace net $/;"	n	namespace:peace	file:
peace::net	libSrc/net/udp/udpServer.h	/^namespace net $/;"	n	namespace:peace
peace::net::NetBase	libSrc/net/base/netBase.h	/^class NetBase$/;"	c	namespace:peace::net
peace::net::NetBase::NetBase	libSrc/net/base/netBase.cpp	/^NetBase::NetBase()$/;"	f	class:peace::net::NetBase	signature:()
peace::net::NetBase::NetBase	libSrc/net/base/netBase.h	/^	NetBase();$/;"	p	class:peace::net::NetBase	access:public	signature:()
peace::net::NetBase::NetType	libSrc/net/base/netBase.h	/^	}NetType;$/;"	t	class:peace::net::NetBase	typeref:enum:peace::net::NetBase::__anon2	access:public
peace::net::NetBase::_chainSize	libSrc/net/base/netBase.h	/^	int _chainSize;$/;"	m	class:peace::net::NetBase	access:public
peace::net::NetBase::_tcpBusinessDealFunc	libSrc/net/base/netBase.h	/^	TcpBusinessDealFuncType _tcpBusinessDealFunc;$/;"	m	class:peace::net::NetBase	access:public
peace::net::NetBase::_udpBusinessDealFunc	libSrc/net/base/netBase.h	/^	UdpBusinessDealFuncType _udpBusinessDealFunc;$/;"	m	class:peace::net::NetBase	access:public
peace::net::NetBase::create	libSrc/net/base/netBase.cpp	/^NetBase* NetBase::create(const NetType type)$/;"	f	class:peace::net::NetBase	signature:(const NetType type)
peace::net::NetBase::create	libSrc/net/base/netBase.h	/^	static NetBase* create(const NetType type);	$/;"	p	class:peace::net::NetBase	access:public	signature:(const NetType type)
peace::net::NetBase::eNetTcpClient	libSrc/net/base/netBase.h	/^		eNetTcpClient,$/;"	e	enum:peace::net::NetBase::__anon2
peace::net::NetBase::eNetTcpServer	libSrc/net/base/netBase.h	/^		eNetTcpServer,$/;"	e	enum:peace::net::NetBase::__anon2
peace::net::NetBase::eNetUdpClient	libSrc/net/base/netBase.h	/^		eNetUdpClient,$/;"	e	enum:peace::net::NetBase::__anon2
peace::net::NetBase::eNetUdpServer	libSrc/net/base/netBase.h	/^		eNetUdpServer,$/;"	e	enum:peace::net::NetBase::__anon2
peace::net::NetBase::exit	libSrc/net/base/netBase.h	/^	virtual void exit() = 0;$/;"	p	class:peace::net::NetBase	access:public	signature:()
peace::net::NetBase::init	libSrc/net/base/netBase.h	/^	virtual int init() = 0;$/;"	p	class:peace::net::NetBase	access:public	signature:()
peace::net::NetBase::registerTcpBusinessDealFunc	libSrc/net/base/netBase.cpp	/^void NetBase::registerTcpBusinessDealFunc(const TcpBusinessDealFuncType pFunc)$/;"	f	class:peace::net::NetBase	signature:(const TcpBusinessDealFuncType pFunc)
peace::net::NetBase::registerTcpBusinessDealFunc	libSrc/net/base/netBase.h	/^	void registerTcpBusinessDealFunc(const TcpBusinessDealFuncType pFunc);$/;"	p	class:peace::net::NetBase	access:public	signature:(const TcpBusinessDealFuncType pFunc)
peace::net::NetBase::registerUdpBusinessDealFunc	libSrc/net/base/netBase.cpp	/^void NetBase::registerUdpBusinessDealFunc(const UdpBusinessDealFuncType pFunc)$/;"	f	class:peace::net::NetBase	signature:(const UdpBusinessDealFuncType pFunc)
peace::net::NetBase::registerUdpBusinessDealFunc	libSrc/net/base/netBase.h	/^	void registerUdpBusinessDealFunc(const UdpBusinessDealFuncType pFunc);	$/;"	p	class:peace::net::NetBase	access:public	signature:(const UdpBusinessDealFuncType pFunc)
peace::net::NetBase::setChainSize	libSrc/net/base/netBase.cpp	/^void NetBase::setChainSize(const int chainSize)$/;"	f	class:peace::net::NetBase	signature:(const int chainSize)
peace::net::NetBase::setChainSize	libSrc/net/base/netBase.h	/^	void setChainSize(const int chainSize);	$/;"	p	class:peace::net::NetBase	access:public	signature:(const int chainSize)
peace::net::NetBase::start	libSrc/net/base/netBase.h	/^	virtual int start(const char *ip, const int port) = 0;$/;"	p	class:peace::net::NetBase	access:public	signature:(const char *ip, const int port)
peace::net::NetBase::stop	libSrc/net/base/netBase.h	/^	virtual void stop() = 0;	 $/;"	p	class:peace::net::NetBase	access:public	signature:()
peace::net::NetBase::~NetBase	libSrc/net/base/netBase.cpp	/^NetBase::~NetBase()$/;"	f	class:peace::net::NetBase	signature:()
peace::net::NetBase::~NetBase	libSrc/net/base/netBase.h	/^	~NetBase();$/;"	p	class:peace::net::NetBase	access:public	signature:()
peace::net::Udp	libSrc/net/udp/udp.h	/^class Udp : public NetBase  $/;"	c	namespace:peace::net	inherits:NetBase
peace::net::Udp::Udp	libSrc/net/udp/udp.cpp	/^Udp::Udp()$/;"	f	class:peace::net::Udp	signature:()
peace::net::Udp::Udp	libSrc/net/udp/udp.h	/^	Udp();$/;"	p	class:peace::net::Udp	access:public	signature:()
peace::net::Udp::_LockChain	libSrc/net/udp/udp.h	/^	pthread_mutex_t _LockChain;$/;"	m	class:peace::net::Udp	access:private
peace::net::Udp::_LockData	libSrc/net/udp/udp.h	/^	pthread_mutex_t _LockData;$/;"	m	class:peace::net::Udp	access:private
peace::net::Udp::_LockSend	libSrc/net/udp/udp.h	/^	pthread_mutex_t _LockSend;$/;"	m	class:peace::net::Udp	access:private
peace::net::Udp::_bufServer	libSrc/net/udp/udp.cpp	/^void Udp::_bufServer()$/;"	f	class:peace::net::Udp	signature:()
peace::net::Udp::_bufServer	libSrc/net/udp/udp.h	/^    void _bufServer();$/;"	p	class:peace::net::Udp	access:public	signature:()
peace::net::Udp::_bufServerPid	libSrc/net/udp/udp.h	/^	pthread_t _bufServerPid;$/;"	m	class:peace::net::Udp	access:private
peace::net::Udp::_isRunning	libSrc/net/udp/udp.h	/^	bool _isRunning;	$/;"	m	class:peace::net::Udp	access:private
peace::net::Udp::_lockSemFinishInit	libSrc/net/udp/udp.h	/^	bool _lockSemFinishInit;$/;"	m	class:peace::net::Udp	access:private
peace::net::Udp::_myPort	libSrc/net/udp/udp.h	/^	int _myPort;$/;"	m	class:peace::net::Udp	access:private
peace::net::Udp::_orgPeerAddr	libSrc/net/udp/udp.h	/^	struct sockaddr_in _orgPeerAddr;$/;"	m	class:peace::net::Udp	typeref:struct:peace::net::Udp::sockaddr_in	access:private
peace::net::Udp::_recvDataBuf	libSrc/net/udp/udp.h	/^	RecvData *_recvDataBuf;$/;"	m	class:peace::net::Udp	access:private
peace::net::Udp::_recvDataBufLast	libSrc/net/udp/udp.h	/^	RecvData *_recvDataBufLast;$/;"	m	class:peace::net::Udp	access:private
peace::net::Udp::_recvDataUdp	libSrc/net/udp/udp.h	/^	RecvData *_recvDataUdp;$/;"	m	class:peace::net::Udp	access:private
peace::net::Udp::_recvServer	libSrc/net/udp/udp.cpp	/^void Udp::_recvServer()$/;"	f	class:peace::net::Udp	signature:()
peace::net::Udp::_recvServer	libSrc/net/udp/udp.h	/^    void _recvServer();$/;"	p	class:peace::net::Udp	access:public	signature:()
peace::net::Udp::_recvServerPid	libSrc/net/udp/udp.h	/^	pthread_t _recvServerPid;$/;"	m	class:peace::net::Udp	access:private
peace::net::Udp::_sock	libSrc/net/udp/udp.h	/^	int _sock;$/;"	m	class:peace::net::Udp	access:private
peace::net::Udp::_taskSem	libSrc/net/udp/udp.h	/^	sem_t _taskSem;$/;"	m	class:peace::net::Udp	access:private
peace::net::Udp::bindSocket	libSrc/net/udp/udp.cpp	/^int Udp::bindSocket(const UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::Udp	signature:(const UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::Udp::bindSocket	libSrc/net/udp/udp.h	/^	static int bindSocket(const UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize);$/;"	p	class:peace::net::Udp	access:public	signature:(const UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::Udp::bufServer	libSrc/net/udp/udp.cpp	/^void* Udp::bufServer(void* arg)$/;"	f	class:peace::net::Udp	signature:(void* arg)
peace::net::Udp::bufServer	libSrc/net/udp/udp.h	/^	static void* bufServer(void* arg);$/;"	p	class:peace::net::Udp	access:public	signature:(void* arg)
peace::net::Udp::exit	libSrc/net/udp/udp.cpp	/^void Udp::exit()$/;"	f	class:peace::net::Udp	signature:()
peace::net::Udp::exit	libSrc/net/udp/udp.h	/^	void exit();$/;"	p	class:peace::net::Udp	access:public	signature:()
peace::net::Udp::init	libSrc/net/udp/udp.cpp	/^int Udp::init()$/;"	f	class:peace::net::Udp	signature:()
peace::net::Udp::init	libSrc/net/udp/udp.h	/^	int init();$/;"	p	class:peace::net::Udp	access:public	signature:()
peace::net::Udp::recvServer	libSrc/net/udp/udp.cpp	/^void* Udp::recvServer(void *arg)$/;"	f	class:peace::net::Udp	signature:(void *arg)
peace::net::Udp::recvServer	libSrc/net/udp/udp.h	/^    static void* recvServer(void* arg);$/;"	p	class:peace::net::Udp	access:public	signature:(void* arg)
peace::net::Udp::savePeerAddr	libSrc/net/udp/udp.cpp	/^void Udp::savePeerAddr(const char *ip, const int port)$/;"	f	class:peace::net::Udp	signature:(const char *ip, const int port)
peace::net::Udp::savePeerAddr	libSrc/net/udp/udp.h	/^	void savePeerAddr(const char *ip, const int port);$/;"	p	class:peace::net::Udp	access:public	signature:(const char *ip, const int port)
peace::net::Udp::selfBind	libSrc/net/udp/udp.h	/^	virtual int selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize) = 0;$/;"	p	class:peace::net::Udp	access:public	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::Udp::start	libSrc/net/udp/udp.cpp	/^int Udp::start(const char *ip, const int port)$/;"	f	class:peace::net::Udp	signature:(const char *ip, const int port)
peace::net::Udp::start	libSrc/net/udp/udp.h	/^	int start(const char *ip, const int port);	$/;"	p	class:peace::net::Udp	access:public	signature:(const char *ip, const int port)
peace::net::Udp::stop	libSrc/net/udp/udp.cpp	/^void Udp::stop()$/;"	f	class:peace::net::Udp	signature:()
peace::net::Udp::stop	libSrc/net/udp/udp.h	/^	void stop();$/;"	p	class:peace::net::Udp	access:public	signature:()
peace::net::Udp::~Udp	libSrc/net/udp/udp.cpp	/^Udp::~Udp()$/;"	f	class:peace::net::Udp	signature:()
peace::net::Udp::~Udp	libSrc/net/udp/udp.h	/^	~Udp();	$/;"	p	class:peace::net::Udp	access:public	signature:()
peace::net::UdpClient	libSrc/net/udp/udpClient.h	/^class UdpClient : public Udp $/;"	c	namespace:peace::net	inherits:Udp
peace::net::UdpClient::selfBind	libSrc/net/udp/udpClient.cpp	/^int UdpClient::selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::UdpClient	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::UdpClient::selfBind	libSrc/net/udp/udpClient.h	/^	virtual int selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize);$/;"	p	class:peace::net::UdpClient	access:public	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::UdpServer	libSrc/net/udp/udpServer.h	/^class UdpServer : public Udp   $/;"	c	namespace:peace::net	inherits:Udp
peace::net::UdpServer::UdpServer	libSrc/net/udp/udpServer.cpp	/^UdpServer::UdpServer()$/;"	f	class:peace::net::UdpServer	signature:()
peace::net::UdpServer::UdpServer	libSrc/net/udp/udpServer.h	/^	UdpServer();$/;"	p	class:peace::net::UdpServer	access:public	signature:()
peace::net::UdpServer::selfBind	libSrc/net/udp/udpServer.cpp	/^int UdpServer::selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::UdpServer	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::UdpServer::selfBind	libSrc/net/udp/udpServer.h	/^	virtual int selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize);$/;"	p	class:peace::net::UdpServer	access:public	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::UdpServer::~UdpServer	libSrc/net/udp/udpServer.cpp	/^UdpServer::~UdpServer()$/;"	f	class:peace::net::UdpServer	signature:()
peace::net::UdpServer::~UdpServer	libSrc/net/udp/udpServer.h	/^	~UdpServer();	$/;"	p	class:peace::net::UdpServer	access:public	signature:()
peace::queuet	libSrc/base/queue/queue.cpp	/^void queuet()$/;"	f	namespace:peace	signature:()
peace::queuet	libSrc/base/queue/queue.h	/^void queuet();$/;"	p	namespace:peace	signature:()
queueInit	install/include/peaceInterface.h	/^int queueInit(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize);$/;"	p	signature:(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)
queueInit	libSrc/peaceInterface.cpp	/^int queueInit(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)$/;"	f	signature:(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)
queueInit	libSrc/peaceInterface.h	/^int queueInit(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize);$/;"	p	signature:(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)
queuePop	install/include/peaceInterface.h	/^int queuePop(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeout);$/;"	p	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeout)
queuePop	libSrc/peaceInterface.cpp	/^int queuePop(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeout)$/;"	f	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeout)
queuePop	libSrc/peaceInterface.h	/^int queuePop(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeout);$/;"	p	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeout)
queuePopInternal	install/include/peaceInterface.h	/^int queuePopInternal(BlockInfo *pBlockInfo, const T& pFunc, void* arg);$/;"	p	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg)
queuePopInternal	libSrc/peaceInterface.cpp	/^int queuePopInternal(BlockInfo *pBlockInfo, const T& pFunc, void* arg)$/;"	f	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg)
queuePopInternal	libSrc/peaceInterface.h	/^int queuePopInternal(BlockInfo *pBlockInfo, const T& pFunc, void* arg);$/;"	p	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg)
queuePush	install/include/peaceInterface.h	/^int queuePush(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize);$/;"	p	signature:(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)
queuePush	libSrc/peaceInterface.cpp	/^int queuePush(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)$/;"	f	signature:(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)
queuePush	libSrc/peaceInterface.h	/^int queuePush(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize);$/;"	p	signature:(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)
queuet	libSrc/base/queue/queue.cpp	/^void queuet()$/;"	f	namespace:peace	signature:()
queuet	libSrc/base/queue/queue.h	/^void queuet();$/;"	p	namespace:peace	signature:()
queuet2	libSrc/base/queue/queue.cpp	/^void queuet2()$/;"	f	namespace:peace::base	signature:()
queuet2	libSrc/base/queue/queue.h	/^void queuet2();$/;"	p	namespace:peace::base	signature:()
recvServer	libSrc/net/udp/udp.cpp	/^void* Udp::recvServer(void *arg)$/;"	f	class:peace::net::Udp	signature:(void *arg)
recvServer	libSrc/net/udp/udp.h	/^    static void* recvServer(void* arg);$/;"	p	class:peace::net::Udp	access:public	signature:(void* arg)
registerTcpBusinessDealFunc	libSrc/net/base/netBase.cpp	/^void NetBase::registerTcpBusinessDealFunc(const TcpBusinessDealFuncType pFunc)$/;"	f	class:peace::net::NetBase	signature:(const TcpBusinessDealFuncType pFunc)
registerTcpBusinessDealFunc	libSrc/net/base/netBase.h	/^	void registerTcpBusinessDealFunc(const TcpBusinessDealFuncType pFunc);$/;"	p	class:peace::net::NetBase	access:public	signature:(const TcpBusinessDealFuncType pFunc)
registerUdpBusinessDealFunc	libSrc/net/base/netBase.cpp	/^void NetBase::registerUdpBusinessDealFunc(const UdpBusinessDealFuncType pFunc)$/;"	f	class:peace::net::NetBase	signature:(const UdpBusinessDealFuncType pFunc)
registerUdpBusinessDealFunc	libSrc/net/base/netBase.h	/^	void registerUdpBusinessDealFunc(const UdpBusinessDealFuncType pFunc);	$/;"	p	class:peace::net::NetBase	access:public	signature:(const UdpBusinessDealFuncType pFunc)
sSRC	libSrc/makefile	/^sSRC = $(shell find $(DIR) -name "*.s")$/;"	m
savePeerAddr	libSrc/net/udp/udp.cpp	/^void Udp::savePeerAddr(const char *ip, const int port)$/;"	f	class:peace::net::Udp	signature:(const char *ip, const int port)
savePeerAddr	libSrc/net/udp/udp.h	/^	void savePeerAddr(const char *ip, const int port);$/;"	p	class:peace::net::Udp	access:public	signature:(const char *ip, const int port)
selfBind	libSrc/net/udp/udp.h	/^	virtual int selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize) = 0;$/;"	p	class:peace::net::Udp	access:public	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
selfBind	libSrc/net/udp/udpClient.cpp	/^int UdpClient::selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::UdpClient	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
selfBind	libSrc/net/udp/udpClient.h	/^	virtual int selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize);$/;"	p	class:peace::net::UdpClient	access:public	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
selfBind	libSrc/net/udp/udpServer.cpp	/^int UdpServer::selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::UdpServer	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
selfBind	libSrc/net/udp/udpServer.h	/^	virtual int selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize);$/;"	p	class:peace::net::UdpServer	access:public	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
setChainSize	libSrc/net/base/netBase.cpp	/^void NetBase::setChainSize(const int chainSize)$/;"	f	class:peace::net::NetBase	signature:(const int chainSize)
setChainSize	libSrc/net/base/netBase.h	/^	void setChainSize(const int chainSize);	$/;"	p	class:peace::net::NetBase	access:public	signature:(const int chainSize)
soFLAGS	libSrc/makefile	/^soFLAGS = -fPIC $/;"	m
start	libSrc/net/base/netBase.h	/^	virtual int start(const char *ip, const int port) = 0;$/;"	p	class:peace::net::NetBase	access:public	signature:(const char *ip, const int port)
start	libSrc/net/udp/udp.cpp	/^int Udp::start(const char *ip, const int port)$/;"	f	class:peace::net::Udp	signature:(const char *ip, const int port)
start	libSrc/net/udp/udp.h	/^	int start(const char *ip, const int port);	$/;"	p	class:peace::net::Udp	access:public	signature:(const char *ip, const int port)
stop	libSrc/net/base/netBase.h	/^	virtual void stop() = 0;	 $/;"	p	class:peace::net::NetBase	access:public	signature:()
stop	libSrc/net/udp/udp.cpp	/^void Udp::stop()$/;"	f	class:peace::net::Udp	signature:()
stop	libSrc/net/udp/udp.h	/^	void stop();$/;"	p	class:peace::net::Udp	access:public	signature:()
threadClose	install/include/peaceInterface.h	/^void threadClose(pthread_t &pid);$/;"	p	signature:(pthread_t &pid)
threadClose	libSrc/base/thread/thread.cpp	/^void threadClose(pthread_t &pid)$/;"	f	namespace:peace::base	signature:(pthread_t &pid)
threadClose	libSrc/base/thread/thread.h	/^void threadClose(pthread_t &pid);$/;"	p	namespace:peace::base	signature:(pthread_t &pid)
threadClose	libSrc/peaceInterface.cpp	/^void threadClose(pthread_t &pid)$/;"	f	signature:(pthread_t &pid)
threadClose	libSrc/peaceInterface.h	/^void threadClose(pthread_t &pid);$/;"	p	signature:(pthread_t &pid)
threadCreate	install/include/peaceInterface.h	/^int threadCreate(pthread_t &pid, void*(*threadCallback)(void*), void *arg, const size_t stackSize);$/;"	p	signature:(pthread_t &pid, void*(*threadCallback)(void*), void *arg, const size_t stackSize)
threadCreate	libSrc/base/thread/thread.cpp	/^int threadCreate(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size)
threadCreate	libSrc/base/thread/thread.h	/^int threadCreate(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size);$/;"	p	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size)
threadCreate	libSrc/peaceInterface.cpp	/^int threadCreate(pthread_t &pid, void*(*threadCallback)(void*), void *arg, const size_t stackSize)$/;"	f	signature:(pthread_t &pid, void*(*threadCallback)(void*), void *arg, const size_t stackSize)
threadCreate	libSrc/peaceInterface.h	/^int threadCreate(pthread_t &pid, void*(*threadCallback)(void*), void *arg, const size_t stackSize);$/;"	p	signature:(pthread_t &pid, void*(*threadCallback)(void*), void *arg, const size_t stackSize)
threadCreateLarge	libSrc/base/thread/thread.cpp	/^int threadCreateLarge(pthread_t &pid, void*(*thread_callback)(void*), void *arg)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
threadCreateLarge	libSrc/base/thread/thread.h	/^int threadCreateLarge(pthread_t &pid, void*(*thread_callback)(void*), void *arg);$/;"	p	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
threadCreateMiddle	libSrc/base/thread/thread.cpp	/^int threadCreateMiddle(pthread_t &pid, void*(*thread_callback)(void*), void *arg)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
threadCreateMiddle	libSrc/base/thread/thread.h	/^int threadCreateMiddle(pthread_t &pid, void*(*thread_callback)(void*), void *arg);$/;"	p	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
threadCreateSmall	libSrc/base/thread/thread.cpp	/^int threadCreateSmall(pthread_t &pid, void*(*thread_callback)(void*), void *arg)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
threadCreateSmall	libSrc/base/thread/thread.h	/^int threadCreateSmall(pthread_t &pid, void*(*thread_callback)(void*), void *arg);$/;"	p	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
udpClientCreate	libSrc/peaceInterface.cpp	/^void* udpClientCreate()$/;"	f	signature:()
udpClientCreate	libSrc/peaceInterface.h	/^void* udpClientCreate();$/;"	p	signature:()
udpServerCreate	libSrc/peaceInterface.cpp	/^void* udpServerCreate()$/;"	f	signature:()
udpServerCreate	libSrc/peaceInterface.h	/^void* udpServerCreate();$/;"	p	signature:()
wr	libSrc/base/file/simpleSaveFile.cpp	/^void SaveFile::wr(const void *data, const int dataSize)$/;"	f	class:peace::base::SaveFile	signature:(const void *data, const int dataSize)
wr	libSrc/base/file/simpleSaveFile.h	/^	void wr(const void *data, const int dataSize);$/;"	p	class:peace::base::SaveFile	access:public	signature:(const void *data, const int dataSize)
~NetBase	libSrc/net/base/netBase.cpp	/^NetBase::~NetBase()$/;"	f	class:peace::net::NetBase	signature:()
~NetBase	libSrc/net/base/netBase.h	/^	~NetBase();$/;"	p	class:peace::net::NetBase	access:public	signature:()
~SaveFile	libSrc/base/file/simpleSaveFile.cpp	/^SaveFile::~SaveFile()$/;"	f	class:peace::base::SaveFile	signature:()
~SaveFile	libSrc/base/file/simpleSaveFile.h	/^	~SaveFile();$/;"	p	class:peace::base::SaveFile	access:public	signature:()
~Udp	libSrc/net/udp/udp.cpp	/^Udp::~Udp()$/;"	f	class:peace::net::Udp	signature:()
~Udp	libSrc/net/udp/udp.h	/^	~Udp();	$/;"	p	class:peace::net::Udp	access:public	signature:()
~UdpServer	libSrc/net/udp/udpServer.cpp	/^UdpServer::~UdpServer()$/;"	f	class:peace::net::UdpServer	signature:()
~UdpServer	libSrc/net/udp/udpServer.h	/^	~UdpServer();	$/;"	p	class:peace::net::UdpServer	access:public	signature:()
