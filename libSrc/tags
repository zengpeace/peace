!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	makefile	/^AR = $(PLATFORM)ar$/;"	m
AS	makefile	/^AS = $(PLATFORM)as$/;"	m
BlockInfo	types.h	/^}BlockInfo;$/;"	t	typeref:struct:__anon3
BufServer	net/udp/udpServer.cpp	/^void* UdpServer::BufServer(void* arg)$/;"	f	class:peace::net::UdpServer	signature:(void* arg)
BufServer	net/udp/udpServer.h	/^	static void* BufServer(void* arg);$/;"	p	class:peace::net::UdpServer	access:public	signature:(void* arg)
BufferInfo	types.h	/^}BufferInfo;$/;"	t	typeref:struct:_BufferInfo
CC	makefile	/^CC = $(PLATFORM)gcc$/;"	m
CCSRC	makefile	/^CCSRC = $(shell find $(DIR) -name "*.cc")$/;"	m
CFLAGS	makefile	/^CFLAGS = $(CXXFLAGS) -std=gnu99 $(MACRO)$/;"	m
CHAIN_SIZE	types.h	37;"	d
CSRC	makefile	/^CSRC = $(shell find $(DIR) -name "*.c")$/;"	m
CXXFLAGS	makefile	/^CXXFLAGS = -Werror -Wall -g -Wunused -Wsign-compare -Wunreachable-code -DDEBUG_SYS_INFO -fPIC $/;"	m
CXXSRC	makefile	/^CXXSRC = $(shell find $(DIR) -name "*.cpp")$/;"	m
CreateChain	base/chain/chain.cpp	/^RecvData *CreateChain(const int len)$/;"	f	namespace:peace::base	signature:(const int len)
CreateChain	base/chain/chain.h	/^	RecvData *CreateChain(const int len);$/;"	p	namespace:peace::base	signature:(const int len)
DIR	makefile	/^DIR = .\/$/;"	m
EPOLL_MAX_EVENT	types.h	39;"	d
Epollop	types.h	/^}Epollop;$/;"	t	typeref:struct:__anon2
GetHeadChain	base/chain/chain.cpp	/^RecvData *GetHeadChain(RecvData **dst)$/;"	f	namespace:peace::base	signature:(RecvData **dst)
GetHeadChain	base/chain/chain.h	/^	RecvData *GetHeadChain(RecvData **dst);$/;"	p	namespace:peace::base	signature:(RecvData **dst)
INC	makefile	/^INC = -I.\/$/;"	m
InsertHead	base/chain/chain.cpp	/^void InsertHead(RecvData **dst, RecvData *src)$/;"	f	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
InsertHead	base/chain/chain.h	/^	void InsertHead(RecvData **dst, RecvData *src);$/;"	p	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
InsertTail	base/chain/chain.cpp	/^void InsertTail(RecvData **dst, RecvData *src)$/;"	f	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
InsertTail	base/chain/chain.h	/^	void InsertTail(RecvData **dst, RecvData *src);$/;"	p	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
InsertTailEx	base/chain/chain.cpp	/^void InsertTailEx(RecvData **dst, RecvData *src, RecvData **dstLast)$/;"	f	namespace:peace::base	signature:(RecvData **dst, RecvData *src, RecvData **dstLast)
InsertTailEx	base/chain/chain.h	/^	void InsertTailEx(RecvData **dst, RecvData *src, RecvData **dstLast);$/;"	p	namespace:peace::base	signature:(RecvData **dst, RecvData *src, RecvData **dstLast)
LDFLAGS	makefile	/^LDFLAGS	= $/;"	m
LIBS	makefile	/^LIBS = -lz -lpthread$/;"	m
LOGD	types.h	87;"	d
MACRO	makefile	/^MACRO = $/;"	m
NetBase	net/base/netBase.cpp	/^NetBase::NetBase()$/;"	f	class:peace::net::NetBase	signature:()
NetBase	net/base/netBase.h	/^	NetBase();$/;"	p	class:peace::net::NetBase	access:public	signature:()
NetBase	net/base/netBase.h	/^class NetBase$/;"	c	namespace:peace::net
NetBase	net/net.h	/^class NetBase $/;"	c	namespace:peace::base
NetBusinessDealFuncType	types.h	/^typedef int (*NetBusinessDealFuncType)(const unsigned char *data, const int dataSize);$/;"	t
NetType	net/base/netBase.h	/^	}NetType;$/;"	t	class:peace::net::NetBase	typeref:enum:peace::net::NetBase::__anon1	access:public
OBJS	makefile	/^OBJS := $(CSRC:%.c=%.o) $(CXXSRC:%.cc=%.o) $(SSRC:%.S=%.o) $(sSRC:%.s=%.o) $(CCSRC:%.cpp=%.o)$/;"	m
QueueInit	base/queue/queue.cpp	/^int QueueInit(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)
QueueInit	base/queue/queue.h	/^int QueueInit(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)
QueuePop	base/queue/queue.cpp	/^int QueuePop(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut)
QueuePop	base/queue/queue.h	/^int QueuePop(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut)
QueuePopInternal	base/queue/queue.cpp	/^int QueuePopInternal(BlockInfo *pBlockInfo, const T& pFunc, void* arg)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg)
QueuePopInternal	base/queue/queue.h	/^int QueuePopInternal(BlockInfo *pBlockInfo, const T& pFunc, void* arg);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg)
QueuePush	base/queue/queue.cpp	/^int QueuePush(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)
QueuePush	base/queue/queue.h	/^int QueuePush(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)
RecvData	types.h	/^}RecvData;$/;"	t	typeref:struct:_recvData
ReleaseChain	base/chain/chain.cpp	/^void ReleaseChain(RecvData **ppHead)$/;"	f	namespace:peace::base	signature:(RecvData **ppHead)
ReleaseChain	base/chain/chain.h	/^	void ReleaseChain(RecvData **ppHead);$/;"	p	namespace:peace::base	signature:(RecvData **ppHead)
SSRC	makefile	/^SSRC = $(shell find $(DIR) -name "*.S")$/;"	m
SaveFile	base/file/simpleSaveFile.h	/^class SaveFile$/;"	c	namespace:peace::base
SaveFileFpMap	base/file/simpleSaveFile.h	/^typedef std::map<const char*, void*> SaveFileFpMap;$/;"	t	namespace:peace::base
TARGET_BIN	makefile	/^TARGET_BIN = .\/peace $/;"	m
TARGET_LIB	makefile	/^TARGET_LIB = .\/libpeace.a$/;"	m
TARGET_SO	makefile	/^TARGET_SO = .\/libpeace.so$/;"	m
THREAD_STACK_SIZE_LARGE	types.h	34;"	d
THREAD_STACK_SIZE_MIDDLE	types.h	33;"	d
THREAD_STACK_SIZE_SMALL	types.h	32;"	d
UDP_BUF_SIZE	types.h	36;"	d
Udp	net/udp/udp.cpp	/^Udp::Udp()$/;"	f	class:peace::net::Udp	signature:()
Udp	net/udp/udp.h	/^	Udp();$/;"	p	class:peace::net::Udp	access:public	signature:()
Udp	net/udp/udp.h	/^class Udp : public NetBase  $/;"	c	namespace:peace::net	inherits:NetBase
UdpClient	net/udp/udpClient.h	/^class UdpClient : public Udp $/;"	c	namespace:peace::net	inherits:Udp
UdpServer	net/udp/udpServer.cpp	/^UdpServer::UdpServer()$/;"	f	class:peace::net::UdpServer	signature:()
UdpServer	net/udp/udpServer.h	/^	UdpServer();$/;"	p	class:peace::net::UdpServer	access:public	signature:()
UdpServer	net/udp/udpServer.h	/^class UdpServer : public Udp   $/;"	c	namespace:peace::net	inherits:Udp
UdpUserType	types.h	/^}UdpUserType;$/;"	t	typeref:enum:__anon4
XX	makefile	/^XX = $(PLATFORM)g++$/;"	m
_BufferInfo	types.h	/^typedef struct _BufferInfo $/;"	s
_BufferInfo::nFlag	types.h	/^        int nFlag;$/;"	m	struct:_BufferInfo	access:public
_BufferInfo::nSize	types.h	/^        int nSize;$/;"	m	struct:_BufferInfo	access:public
_BufferInfo::pData	types.h	/^        unsigned char *pData;$/;"	m	struct:_BufferInfo	access:public
_BufferInfo::pNext	types.h	/^        struct _BufferInfo *pNext;$/;"	m	struct:_BufferInfo	typeref:struct:_BufferInfo::_BufferInfo	access:public
_LockChain	net/udp/udpServer.h	/^	pthread_mutex_t _LockChain;$/;"	m	class:peace::net::UdpServer	access:private
_LockData	net/udp/udpServer.h	/^	pthread_mutex_t _LockData;$/;"	m	class:peace::net::UdpServer	access:private
_LockSend	net/udp/udpServer.h	/^	pthread_mutex_t _LockSend;$/;"	m	class:peace::net::UdpServer	access:private
_PEACE_BASE_BASE_H_	base/base.h	2;"	d
_PEACE_BASE_CHAIN_CHAIN_H_	base/chain/chain.h	2;"	d
_PEACE_BASE_FILE_FILE_H_	base/file/file.h	2;"	d
_PEACE_BASE_FILE_SIMPLE_SAVE_FILE_H_	base/file/simpleSaveFile.h	2;"	d
_PEACE_BASE_QUEUE_QUEUE_H_	base/queue/queue.h	2;"	d
_PEACE_BASE_THREAD_THREAD_H_	base/thread/thread.h	2;"	d
_PEACE_NET_BASE_COMMON_COMMON_H_	net/common/common.cpp	2;"	d	file:
_PEACE_NET_BASE_COMMON_COMMON_H_	net/common/common.h	2;"	d
_PEACE_NET_BASE_NET_BASE_H_	net/base/netBase.h	2;"	d
_PEACE_NET_NET_H_	net/net.h	2;"	d
_PEACE_NET_UDP_UDP_CLIENT_H_	net/udp/udpClient.h	2;"	d
_PEACE_NET_UDP_UDP_H_	net/udp/udp.h	2;"	d
_PEACE_NET_UDP_UDP_SERVER_H_	net/udp/udpServer.h	2;"	d
_PEACE_PEACE_H_	peace.h	2;"	d
_PEACE_PEACE_INTERFACE_H_	peaceInterface.h	2;"	d
_PEACE_TYPES_H_	types.h	2;"	d
__anon2::epfd	types.h	/^	int epfd;$/;"	m	struct:__anon2	access:public
__anon2::events	types.h	/^	struct epoll_event events[EPOLL_MAX_EVENT + 1];$/;"	m	struct:__anon2	typeref:struct:__anon2::epoll_event	access:public
__anon2::nevents	types.h	/^	int nevents;$/;"	m	struct:__anon2	access:public
__anon3::m_Lock	types.h	/^        pthread_mutex_t m_Lock;$/;"	m	struct:__anon3	access:public
__anon3::m_Pop	types.h	/^        BufferInfo *m_Pop;$/;"	m	struct:__anon3	access:public
__anon3::m_Push	types.h	/^        BufferInfo *m_Push;$/;"	m	struct:__anon3	access:public
__anon3::m_Semaphore	types.h	/^        sem_t m_Semaphore;$/;"	m	struct:__anon3	access:public
__anon3::m_nDataSize	types.h	/^        int m_nDataSize;$/;"	m	struct:__anon3	access:public
__anon3::m_nInfoSize	types.h	/^        int m_nInfoSize;$/;"	m	struct:__anon3	access:public
__anon3::m_pCurr	types.h	/^        unsigned char *m_pCurr;$/;"	m	struct:__anon3	access:public
__anon3::m_pData	types.h	/^        unsigned char *m_pData;$/;"	m	struct:__anon3	access:public
__anon3::m_pInfo	types.h	/^        BufferInfo *m_pInfo;$/;"	m	struct:__anon3	access:public
_bufServer	net/udp/udpServer.cpp	/^void UdpServer::_bufServer()$/;"	f	class:peace::net::UdpServer	signature:()
_bufServer	net/udp/udpServer.h	/^	void _bufServer();$/;"	p	class:peace::net::UdpServer	access:public	signature:()
_bufServerPid	net/udp/udpServer.h	/^	pthread_t _bufServerPid;$/;"	m	class:peace::net::UdpServer	access:private
_businessDealFunc	net/base/netBase.h	/^	NetBusinessDealFuncType _businessDealFunc;$/;"	m	class:peace::net::NetBase	access:public
_chainSize	net/base/netBase.h	/^	int _chainSize;$/;"	m	class:peace::net::NetBase	access:public
_fp	base/file/simpleSaveFile.h	/^	FILE * _fp;$/;"	m	class:peace::base::SaveFile	access:private
_lockSemNotFinishInit	net/udp/udpServer.h	/^	int _lockSemNotFinishInit;$/;"	m	class:peace::net::UdpServer	access:private
_recvData	types.h	/^typedef struct _recvData$/;"	s
_recvData::addr	types.h	/^	struct sockaddr_in addr;$/;"	m	struct:_recvData	typeref:struct:_recvData::sockaddr_in	access:public
_recvData::buf	types.h	/^	unsigned char buf[UDP_BUF_SIZE];$/;"	m	struct:_recvData	access:public
_recvData::count	types.h	/^	int count;$/;"	m	struct:_recvData	access:public
_recvData::pNext	types.h	/^	struct _recvData *pNext;$/;"	m	struct:_recvData	typeref:struct:_recvData::_recvData	access:public
_recvDataBuf	net/udp/udpServer.h	/^	RecvData *_recvDataBuf;$/;"	m	class:peace::net::UdpServer	access:private
_recvDataBufLast	net/udp/udpServer.h	/^	RecvData *_recvDataBufLast;$/;"	m	class:peace::net::UdpServer	access:private
_recvDataUdp	net/udp/udpServer.h	/^	RecvData *_recvDataUdp;$/;"	m	class:peace::net::UdpServer	access:private
_recvServerEpoll	net/udp/udpServer.cpp	/^void UdpServer::_recvServerEpoll()$/;"	f	class:peace::net::UdpServer	signature:()
_recvServerEpoll	net/udp/udpServer.h	/^	void _recvServerEpoll();$/;"	p	class:peace::net::UdpServer	access:public	signature:()
_recvServerPid	net/udp/udpServer.h	/^	pthread_t _recvServerPid;$/;"	m	class:peace::net::UdpServer	access:private
_sock	net/udp/udpServer.h	/^	int _sock;$/;"	m	class:peace::net::UdpServer	access:private
_taskSem	net/udp/udpServer.h	/^	sem_t  _taskSem;$/;"	m	class:peace::net::UdpServer	access:private
addr	types.h	/^	struct sockaddr_in addr;$/;"	m	struct:_recvData	typeref:struct:_recvData::sockaddr_in	access:public
base	base/base.h	/^namespace base $/;"	n	namespace:peace
base	base/chain/chain.cpp	/^namespace base $/;"	n	namespace:peace	file:
base	base/chain/chain.h	/^namespace base $/;"	n	namespace:peace
base	base/file/file.cpp	/^namespace base $/;"	n	namespace:peace	file:
base	base/file/file.h	/^namespace base $/;"	n	namespace:peace
base	base/file/simpleSaveFile.cpp	/^namespace base $/;"	n	namespace:peace	file:
base	base/file/simpleSaveFile.h	/^namespace base $/;"	n	namespace:peace
base	base/queue/queue.cpp	/^namespace base $/;"	n	namespace:peace	file:
base	base/queue/queue.h	/^namespace base $/;"	n	namespace:peace
base	base/thread/thread.cpp	/^namespace base$/;"	n	namespace:peace	file:
base	base/thread/thread.h	/^namespace base $/;"	n	namespace:peace
base	net/net.h	/^namespace base$/;"	n	namespace:peace
bindSocket	net/udp/udp.cpp	/^int Udp::bindSocket(UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::Udp	signature:(UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
bindSocket	net/udp/udp.h	/^	static int bindSocket(UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize);$/;"	p	class:peace::net::Udp	access:public	signature:(UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
buf	types.h	/^	unsigned char buf[UDP_BUF_SIZE];$/;"	m	struct:_recvData	access:public
chainCreate	peaceInterface.cpp	/^RecvData *chainCreate(const int len)$/;"	f	signature:(const int len)
chainCreate	peaceInterface.h	/^RecvData *chainCreate(const int len);$/;"	p	signature:(const int len)
chainGetHead	peaceInterface.cpp	/^RecvData *chainGetHead(RecvData **dst)$/;"	f	signature:(RecvData **dst)
chainGetHead	peaceInterface.h	/^RecvData *chainGetHead(RecvData **dst);$/;"	p	signature:(RecvData **dst)
chainInsertHead	peaceInterface.cpp	/^void chainInsertHead(RecvData **dst, RecvData *src)$/;"	f	signature:(RecvData **dst, RecvData *src)
chainInsertHead	peaceInterface.h	/^void chainInsertHead(RecvData **dst, RecvData *src);$/;"	p	signature:(RecvData **dst, RecvData *src)
chainInsertTail	peaceInterface.cpp	/^void chainInsertTail(RecvData **dst, RecvData *src)$/;"	f	signature:(RecvData **dst, RecvData *src)
chainInsertTail	peaceInterface.h	/^void chainInsertTail(RecvData **dst, RecvData *src);$/;"	p	signature:(RecvData **dst, RecvData *src)
chainInsertTailEx	peaceInterface.cpp	/^void chainInsertTailEx(RecvData **dst, RecvData *src, RecvData **dstLast)$/;"	f	signature:(RecvData **dst, RecvData *src, RecvData **dstLast)
chainInsertTailEx	peaceInterface.h	/^void chainInsertTailEx(RecvData **dst, RecvData *src, RecvData **dstLast);$/;"	p	signature:(RecvData **dst, RecvData *src, RecvData **dstLast)
chainRelease	peaceInterface.cpp	/^void chainRelease(RecvData **ppHead)$/;"	f	signature:(RecvData **ppHead)
chainRelease	peaceInterface.h	/^void chainRelease(RecvData **ppHead);$/;"	p	signature:(RecvData **ppHead)
clientBind	net/udp/udp.cpp	/^int Udp::clientBind(const char *ip, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::Udp	signature:(const char *ip, const int sendBufSize, const int recvBufSize)
close	base/file/simpleSaveFile.cpp	/^void SaveFile::close()$/;"	f	class:peace::base::SaveFile	signature:()
close	base/file/simpleSaveFile.h	/^	void close();$/;"	p	class:peace::base::SaveFile	access:public	signature:()
close	net/net.h	/^	virtual void close() = 0;$/;"	p	class:peace::base::NetBase	access:public	signature:()
count	types.h	/^	int count;$/;"	m	struct:_recvData	access:public
create	net/base/netBase.cpp	/^NetBase* NetBase::create(const NetType type)$/;"	f	class:peace::net::NetBase	signature:(const NetType type)
create	net/base/netBase.h	/^	static NetBase* create(const NetType type);$/;"	p	class:peace::net::NetBase	access:public	signature:(const NetType type)
create	net/net.h	/^	static Net* create(const char *netType, const char *serverOrClient);$/;"	p	class:peace::base::NetBase	access:public	signature:(const char *netType, const char *serverOrClient)
eNetTcpClient	net/base/netBase.h	/^		eNetTcpClient,$/;"	e	enum:peace::net::NetBase::__anon1
eNetTcpServer	net/base/netBase.h	/^		eNetTcpServer,$/;"	e	enum:peace::net::NetBase::__anon1
eNetUdpClient	net/base/netBase.h	/^		eNetUdpClient,$/;"	e	enum:peace::net::NetBase::__anon1
eNetUdpServer	net/base/netBase.h	/^		eNetUdpServer,$/;"	e	enum:peace::net::NetBase::__anon1
eUdpClient	types.h	/^	eUdpClient,$/;"	e	enum:__anon4
eUdpServer	types.h	/^	eUdpServer,$/;"	e	enum:__anon4
epfd	types.h	/^	int epfd;$/;"	m	struct:__anon2	access:public
events	types.h	/^	struct epoll_event events[EPOLL_MAX_EVENT + 1];$/;"	m	struct:__anon2	typeref:struct:__anon2::epoll_event	access:public
fileSimpleClose	base/file/file.cpp	/^void fileSimpleClose(const char *fileAbsName)$/;"	f	namespace:peace::base	signature:(const char *fileAbsName)
fileSimpleClose	base/file/file.h	/^void fileSimpleClose(const char *fileAbsName);$/;"	p	namespace:peace::base	signature:(const char *fileAbsName)
fileSimpleClose	peaceInterface.cpp	/^void fileSimpleClose(const char *fileAbsName)$/;"	f	signature:(const char *fileAbsName)
fileSimpleClose	peaceInterface.h	/^void fileSimpleClose(const char *fileAbsName);$/;"	p	signature:(const char *fileAbsName)
fileSimpleWrite	base/file/file.cpp	/^void fileSimpleWrite(const unsigned char *data, const int size, const char *fileAbsName)$/;"	f	namespace:peace::base	signature:(const unsigned char *data, const int size, const char *fileAbsName)
fileSimpleWrite	base/file/file.h	/^void fileSimpleWrite(const unsigned char *data, const int size, const char *fileAbsName);$/;"	p	namespace:peace::base	signature:(const unsigned char *data, const int size, const char *fileAbsName)
fileSimpleWrite	peaceInterface.cpp	/^void fileSimpleWrite(const unsigned char *data, const int size, const char *fileAbsName)$/;"	f	signature:(const unsigned char *data, const int size, const char *fileAbsName)
fileSimpleWrite	peaceInterface.h	/^void fileSimpleWrite(const unsigned char *data, const int size, const char *fileAbsName);$/;"	p	signature:(const unsigned char *data, const int size, const char *fileAbsName)
gUdpClientSelfPortRangeBegin	types.h	/^static const int gUdpClientSelfPortRangeBegin = 40001;$/;"	v
gUdpClientSelfPortRangeEnd	types.h	/^static const int gUdpClientSelfPortRangeEnd = 45000;$/;"	v
gUdpClientSockRecvBufSize	types.h	/^static const int gUdpClientSockRecvBufSize = 128 * 1024;$/;"	v
gUdpClientSockSendBufSize	types.h	/^static const int gUdpClientSockSendBufSize = 128 * 1024;$/;"	v
gUdpServerSockRecvBufSize	types.h	/^static const int gUdpServerSockRecvBufSize = 128 * 1024;$/;"	v
gUdpServerSockSendBufSize	types.h	/^static const int gUdpServerSockSendBufSize = 128 * 1024;$/;"	v
getObj	base/file/simpleSaveFile.cpp	/^SaveFile* SaveFile::getObj(const char *fileName)$/;"	f	class:peace::base::SaveFile	signature:(const char *fileName)
getObj	base/file/simpleSaveFile.h	/^	static SaveFile* getObj(const char *fileName); $/;"	p	class:peace::base::SaveFile	access:public	signature:(const char *fileName)
m_Lock	types.h	/^        pthread_mutex_t m_Lock;$/;"	m	struct:__anon3	access:public
m_Pop	types.h	/^        BufferInfo *m_Pop;$/;"	m	struct:__anon3	access:public
m_Push	types.h	/^        BufferInfo *m_Push;$/;"	m	struct:__anon3	access:public
m_Semaphore	types.h	/^        sem_t m_Semaphore;$/;"	m	struct:__anon3	access:public
m_nDataSize	types.h	/^        int m_nDataSize;$/;"	m	struct:__anon3	access:public
m_nInfoSize	types.h	/^        int m_nInfoSize;$/;"	m	struct:__anon3	access:public
m_pCurr	types.h	/^        unsigned char *m_pCurr;$/;"	m	struct:__anon3	access:public
m_pData	types.h	/^        unsigned char *m_pData;$/;"	m	struct:__anon3	access:public
m_pInfo	types.h	/^        BufferInfo *m_pInfo;$/;"	m	struct:__anon3	access:public
mapFp	base/file/simpleSaveFile.cpp	/^SaveFileFpMap mapFp;$/;"	m	namespace:peace::base	file:
nFlag	types.h	/^        int nFlag;$/;"	m	struct:_BufferInfo	access:public
nSize	types.h	/^        int nSize;$/;"	m	struct:_BufferInfo	access:public
net	net/base/netBase.cpp	/^namespace net $/;"	n	namespace:peace	file:
net	net/base/netBase.h	/^namespace net $/;"	n	namespace:peace
net	net/udp/udp.cpp	/^namespace net $/;"	n	namespace:peace	file:
net	net/udp/udp.h	/^namespace net $/;"	n	namespace:peace
net	net/udp/udpClient.cpp	/^namespace net $/;"	n	namespace:peace	file:
net	net/udp/udpClient.h	/^namespace net $/;"	n	namespace:peace
net	net/udp/udpServer.cpp	/^namespace net $/;"	n	namespace:peace	file:
net	net/udp/udpServer.h	/^namespace net $/;"	n	namespace:peace
nevents	types.h	/^	int nevents;$/;"	m	struct:__anon2	access:public
open	base/file/simpleSaveFile.cpp	/^void *SaveFile::open(const char *fileName)$/;"	f	class:peace::base::SaveFile	signature:(const char *fileName)
open	base/file/simpleSaveFile.h	/^	void * open(const char *fileName);$/;"	p	class:peace::base::SaveFile	access:public	signature:(const char *fileName)
pData	types.h	/^        unsigned char *pData;$/;"	m	struct:_BufferInfo	access:public
pNext	types.h	/^	struct _recvData *pNext;$/;"	m	struct:_recvData	typeref:struct:_recvData::_recvData	access:public
pNext	types.h	/^        struct _BufferInfo *pNext;$/;"	m	struct:_BufferInfo	typeref:struct:_BufferInfo::_BufferInfo	access:public
peace	base/base.h	/^namespace peace $/;"	n
peace	base/chain/chain.cpp	/^namespace peace $/;"	n	file:
peace	base/chain/chain.h	/^namespace peace $/;"	n
peace	base/file/file.cpp	/^namespace peace $/;"	n	file:
peace	base/file/file.h	/^namespace peace $/;"	n
peace	base/file/simpleSaveFile.cpp	/^namespace peace $/;"	n	file:
peace	base/file/simpleSaveFile.h	/^namespace peace $/;"	n
peace	base/queue/queue.cpp	/^namespace peace $/;"	n	file:
peace	base/queue/queue.h	/^namespace peace $/;"	n
peace	base/thread/thread.cpp	/^namespace peace $/;"	n	file:
peace	base/thread/thread.h	/^namespace peace $/;"	n
peace	net/base/netBase.cpp	/^namespace peace $/;"	n	file:
peace	net/base/netBase.h	/^namespace peace $/;"	n
peace	net/net.h	/^namespace peace $/;"	n
peace	net/udp/udp.cpp	/^namespace peace $/;"	n	file:
peace	net/udp/udp.h	/^namespace peace $/;"	n
peace	net/udp/udpClient.cpp	/^namespace peace $/;"	n	file:
peace	net/udp/udpClient.h	/^namespace peace $/;"	n
peace	net/udp/udpServer.cpp	/^namespace peace $/;"	n	file:
peace	net/udp/udpServer.h	/^namespace peace $/;"	n
peace::base	base/base.h	/^namespace base $/;"	n	namespace:peace
peace::base	base/chain/chain.cpp	/^namespace base $/;"	n	namespace:peace	file:
peace::base	base/chain/chain.h	/^namespace base $/;"	n	namespace:peace
peace::base	base/file/file.cpp	/^namespace base $/;"	n	namespace:peace	file:
peace::base	base/file/file.h	/^namespace base $/;"	n	namespace:peace
peace::base	base/file/simpleSaveFile.cpp	/^namespace base $/;"	n	namespace:peace	file:
peace::base	base/file/simpleSaveFile.h	/^namespace base $/;"	n	namespace:peace
peace::base	base/queue/queue.cpp	/^namespace base $/;"	n	namespace:peace	file:
peace::base	base/queue/queue.h	/^namespace base $/;"	n	namespace:peace
peace::base	base/thread/thread.cpp	/^namespace base$/;"	n	namespace:peace	file:
peace::base	base/thread/thread.h	/^namespace base $/;"	n	namespace:peace
peace::base	net/net.h	/^namespace base$/;"	n	namespace:peace
peace::base::CreateChain	base/chain/chain.cpp	/^RecvData *CreateChain(const int len)$/;"	f	namespace:peace::base	signature:(const int len)
peace::base::CreateChain	base/chain/chain.h	/^	RecvData *CreateChain(const int len);$/;"	p	namespace:peace::base	signature:(const int len)
peace::base::GetHeadChain	base/chain/chain.cpp	/^RecvData *GetHeadChain(RecvData **dst)$/;"	f	namespace:peace::base	signature:(RecvData **dst)
peace::base::GetHeadChain	base/chain/chain.h	/^	RecvData *GetHeadChain(RecvData **dst);$/;"	p	namespace:peace::base	signature:(RecvData **dst)
peace::base::InsertHead	base/chain/chain.cpp	/^void InsertHead(RecvData **dst, RecvData *src)$/;"	f	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
peace::base::InsertHead	base/chain/chain.h	/^	void InsertHead(RecvData **dst, RecvData *src);$/;"	p	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
peace::base::InsertTail	base/chain/chain.cpp	/^void InsertTail(RecvData **dst, RecvData *src)$/;"	f	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
peace::base::InsertTail	base/chain/chain.h	/^	void InsertTail(RecvData **dst, RecvData *src);$/;"	p	namespace:peace::base	signature:(RecvData **dst, RecvData *src)
peace::base::InsertTailEx	base/chain/chain.cpp	/^void InsertTailEx(RecvData **dst, RecvData *src, RecvData **dstLast)$/;"	f	namespace:peace::base	signature:(RecvData **dst, RecvData *src, RecvData **dstLast)
peace::base::InsertTailEx	base/chain/chain.h	/^	void InsertTailEx(RecvData **dst, RecvData *src, RecvData **dstLast);$/;"	p	namespace:peace::base	signature:(RecvData **dst, RecvData *src, RecvData **dstLast)
peace::base::NetBase	net/net.h	/^class NetBase $/;"	c	namespace:peace::base
peace::base::NetBase::close	net/net.h	/^	virtual void close() = 0;$/;"	p	class:peace::base::NetBase	access:public	signature:()
peace::base::NetBase::create	net/net.h	/^	static Net* create(const char *netType, const char *serverOrClient);$/;"	p	class:peace::base::NetBase	access:public	signature:(const char *netType, const char *serverOrClient)
peace::base::QueueInit	base/queue/queue.cpp	/^int QueueInit(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)
peace::base::QueueInit	base/queue/queue.h	/^int QueueInit(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)
peace::base::QueuePop	base/queue/queue.cpp	/^int QueuePop(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut)
peace::base::QueuePop	base/queue/queue.h	/^int QueuePop(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeOut)
peace::base::QueuePopInternal	base/queue/queue.cpp	/^int QueuePopInternal(BlockInfo *pBlockInfo, const T& pFunc, void* arg)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg)
peace::base::QueuePopInternal	base/queue/queue.h	/^int QueuePopInternal(BlockInfo *pBlockInfo, const T& pFunc, void* arg);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg)
peace::base::QueuePush	base/queue/queue.cpp	/^int QueuePush(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)$/;"	f	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)
peace::base::QueuePush	base/queue/queue.h	/^int QueuePush(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize);$/;"	p	namespace:peace::base	signature:(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)
peace::base::ReleaseChain	base/chain/chain.cpp	/^void ReleaseChain(RecvData **ppHead)$/;"	f	namespace:peace::base	signature:(RecvData **ppHead)
peace::base::ReleaseChain	base/chain/chain.h	/^	void ReleaseChain(RecvData **ppHead);$/;"	p	namespace:peace::base	signature:(RecvData **ppHead)
peace::base::SaveFile	base/file/simpleSaveFile.h	/^class SaveFile$/;"	c	namespace:peace::base
peace::base::SaveFile::_fp	base/file/simpleSaveFile.h	/^	FILE * _fp;$/;"	m	class:peace::base::SaveFile	access:private
peace::base::SaveFile::close	base/file/simpleSaveFile.cpp	/^void SaveFile::close()$/;"	f	class:peace::base::SaveFile	signature:()
peace::base::SaveFile::close	base/file/simpleSaveFile.h	/^	void close();$/;"	p	class:peace::base::SaveFile	access:public	signature:()
peace::base::SaveFile::getObj	base/file/simpleSaveFile.cpp	/^SaveFile* SaveFile::getObj(const char *fileName)$/;"	f	class:peace::base::SaveFile	signature:(const char *fileName)
peace::base::SaveFile::getObj	base/file/simpleSaveFile.h	/^	static SaveFile* getObj(const char *fileName); $/;"	p	class:peace::base::SaveFile	access:public	signature:(const char *fileName)
peace::base::SaveFile::open	base/file/simpleSaveFile.cpp	/^void *SaveFile::open(const char *fileName)$/;"	f	class:peace::base::SaveFile	signature:(const char *fileName)
peace::base::SaveFile::open	base/file/simpleSaveFile.h	/^	void * open(const char *fileName);$/;"	p	class:peace::base::SaveFile	access:public	signature:(const char *fileName)
peace::base::SaveFile::wr	base/file/simpleSaveFile.cpp	/^void SaveFile::wr(const void *data, const int dataSize)$/;"	f	class:peace::base::SaveFile	signature:(const void *data, const int dataSize)
peace::base::SaveFile::wr	base/file/simpleSaveFile.h	/^	void wr(const void *data, const int dataSize);$/;"	p	class:peace::base::SaveFile	access:public	signature:(const void *data, const int dataSize)
peace::base::SaveFile::~SaveFile	base/file/simpleSaveFile.cpp	/^SaveFile::~SaveFile()$/;"	f	class:peace::base::SaveFile	signature:()
peace::base::SaveFile::~SaveFile	base/file/simpleSaveFile.h	/^	~SaveFile();$/;"	p	class:peace::base::SaveFile	access:public	signature:()
peace::base::SaveFileFpMap	base/file/simpleSaveFile.h	/^typedef std::map<const char*, void*> SaveFileFpMap;$/;"	t	namespace:peace::base
peace::base::fileSimpleClose	base/file/file.cpp	/^void fileSimpleClose(const char *fileAbsName)$/;"	f	namespace:peace::base	signature:(const char *fileAbsName)
peace::base::fileSimpleClose	base/file/file.h	/^void fileSimpleClose(const char *fileAbsName);$/;"	p	namespace:peace::base	signature:(const char *fileAbsName)
peace::base::fileSimpleWrite	base/file/file.cpp	/^void fileSimpleWrite(const unsigned char *data, const int size, const char *fileAbsName)$/;"	f	namespace:peace::base	signature:(const unsigned char *data, const int size, const char *fileAbsName)
peace::base::fileSimpleWrite	base/file/file.h	/^void fileSimpleWrite(const unsigned char *data, const int size, const char *fileAbsName);$/;"	p	namespace:peace::base	signature:(const unsigned char *data, const int size, const char *fileAbsName)
peace::base::mapFp	base/file/simpleSaveFile.cpp	/^SaveFileFpMap mapFp;$/;"	m	namespace:peace::base	file:
peace::base::queuet2	base/queue/queue.cpp	/^void queuet2()$/;"	f	namespace:peace::base	signature:()
peace::base::queuet2	base/queue/queue.h	/^void queuet2();$/;"	p	namespace:peace::base	signature:()
peace::base::threadClose	base/thread/thread.cpp	/^void threadClose(pthread_t &pid)$/;"	f	namespace:peace::base	signature:(pthread_t &pid)
peace::base::threadClose	base/thread/thread.h	/^void threadClose(pthread_t &pid);$/;"	p	namespace:peace::base	signature:(pthread_t &pid)
peace::base::threadCreate	base/thread/thread.cpp	/^int threadCreate(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size)
peace::base::threadCreate	base/thread/thread.h	/^int threadCreate(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size);$/;"	p	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size)
peace::base::threadCreateLarge	base/thread/thread.cpp	/^int threadCreateLarge(pthread_t &pid, void*(*thread_callback)(void*), void *arg)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
peace::base::threadCreateMiddle	base/thread/thread.cpp	/^int threadCreateMiddle(pthread_t &pid, void*(*thread_callback)(void*), void *arg)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
peace::base::threadCreateSmall	base/thread/thread.cpp	/^int threadCreateSmall(pthread_t &pid, void*(*thread_callback)(void*), void *arg)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
peace::net	net/base/netBase.cpp	/^namespace net $/;"	n	namespace:peace	file:
peace::net	net/base/netBase.h	/^namespace net $/;"	n	namespace:peace
peace::net	net/udp/udp.cpp	/^namespace net $/;"	n	namespace:peace	file:
peace::net	net/udp/udp.h	/^namespace net $/;"	n	namespace:peace
peace::net	net/udp/udpClient.cpp	/^namespace net $/;"	n	namespace:peace	file:
peace::net	net/udp/udpClient.h	/^namespace net $/;"	n	namespace:peace
peace::net	net/udp/udpServer.cpp	/^namespace net $/;"	n	namespace:peace	file:
peace::net	net/udp/udpServer.h	/^namespace net $/;"	n	namespace:peace
peace::net::NetBase	net/base/netBase.h	/^class NetBase$/;"	c	namespace:peace::net
peace::net::NetBase::NetBase	net/base/netBase.cpp	/^NetBase::NetBase()$/;"	f	class:peace::net::NetBase	signature:()
peace::net::NetBase::NetBase	net/base/netBase.h	/^	NetBase();$/;"	p	class:peace::net::NetBase	access:public	signature:()
peace::net::NetBase::NetType	net/base/netBase.h	/^	}NetType;$/;"	t	class:peace::net::NetBase	typeref:enum:peace::net::NetBase::__anon1	access:public
peace::net::NetBase::_businessDealFunc	net/base/netBase.h	/^	NetBusinessDealFuncType _businessDealFunc;$/;"	m	class:peace::net::NetBase	access:public
peace::net::NetBase::_chainSize	net/base/netBase.h	/^	int _chainSize;$/;"	m	class:peace::net::NetBase	access:public
peace::net::NetBase::create	net/base/netBase.cpp	/^NetBase* NetBase::create(const NetType type)$/;"	f	class:peace::net::NetBase	signature:(const NetType type)
peace::net::NetBase::create	net/base/netBase.h	/^	static NetBase* create(const NetType type);$/;"	p	class:peace::net::NetBase	access:public	signature:(const NetType type)
peace::net::NetBase::eNetTcpClient	net/base/netBase.h	/^		eNetTcpClient,$/;"	e	enum:peace::net::NetBase::__anon1
peace::net::NetBase::eNetTcpServer	net/base/netBase.h	/^		eNetTcpServer,$/;"	e	enum:peace::net::NetBase::__anon1
peace::net::NetBase::eNetUdpClient	net/base/netBase.h	/^		eNetUdpClient,$/;"	e	enum:peace::net::NetBase::__anon1
peace::net::NetBase::eNetUdpServer	net/base/netBase.h	/^		eNetUdpServer,$/;"	e	enum:peace::net::NetBase::__anon1
peace::net::NetBase::registerBusinessDealFunc	net/base/netBase.cpp	/^void NetBase::registerBusinessDealFunc(const NetBusinessDealFuncType pFunc)$/;"	f	class:peace::net::NetBase	signature:(const NetBusinessDealFuncType pFunc)
peace::net::NetBase::registerBusinessDealFunc	net/base/netBase.h	/^	void registerBusinessDealFunc(const NetBusinessDealFuncType pFunc);$/;"	p	class:peace::net::NetBase	access:public	signature:(const NetBusinessDealFuncType pFunc)
peace::net::NetBase::setChainSize	net/base/netBase.cpp	/^void NetBase::setChainSize(const int chainSize)$/;"	f	class:peace::net::NetBase	signature:(const int chainSize)
peace::net::NetBase::setChainSize	net/base/netBase.h	/^	void setChainSize(const int chainSize);	$/;"	p	class:peace::net::NetBase	access:public	signature:(const int chainSize)
peace::net::NetBase::start	net/base/netBase.h	/^	virtual int start(const char *ip, const int port) = 0;$/;"	p	class:peace::net::NetBase	access:public	signature:(const char *ip, const int port)
peace::net::NetBase::stop	net/base/netBase.h	/^	virtual void stop() = 0;	$/;"	p	class:peace::net::NetBase	access:public	signature:()
peace::net::NetBase::~NetBase	net/base/netBase.cpp	/^NetBase::~NetBase()$/;"	f	class:peace::net::NetBase	signature:()
peace::net::NetBase::~NetBase	net/base/netBase.h	/^	~NetBase();$/;"	p	class:peace::net::NetBase	access:public	signature:()
peace::net::Udp	net/udp/udp.h	/^class Udp : public NetBase  $/;"	c	namespace:peace::net	inherits:NetBase
peace::net::Udp::Udp	net/udp/udp.cpp	/^Udp::Udp()$/;"	f	class:peace::net::Udp	signature:()
peace::net::Udp::Udp	net/udp/udp.h	/^	Udp();$/;"	p	class:peace::net::Udp	access:public	signature:()
peace::net::Udp::bindSocket	net/udp/udp.cpp	/^int Udp::bindSocket(UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::Udp	signature:(UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::Udp::bindSocket	net/udp/udp.h	/^	static int bindSocket(UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize);$/;"	p	class:peace::net::Udp	access:public	signature:(UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::Udp::clientBind	net/udp/udp.cpp	/^int Udp::clientBind(const char *ip, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::Udp	signature:(const char *ip, const int sendBufSize, const int recvBufSize)
peace::net::Udp::selfBind	net/udp/udp.h	/^	virtual int selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize) = 0;$/;"	p	class:peace::net::Udp	access:public	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::Udp::serverBind	net/udp/udp.cpp	/^int Udp::serverBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::Udp	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::Udp::~Udp	net/udp/udp.cpp	/^Udp::~Udp()$/;"	f	class:peace::net::Udp	signature:()
peace::net::Udp::~Udp	net/udp/udp.h	/^	~Udp();	$/;"	p	class:peace::net::Udp	access:public	signature:()
peace::net::UdpClient	net/udp/udpClient.h	/^class UdpClient : public Udp $/;"	c	namespace:peace::net	inherits:Udp
peace::net::UdpClient::selfBind	net/udp/udpClient.cpp	/^int UdpClient::selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::UdpClient	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::UdpClient::selfBind	net/udp/udpClient.h	/^	virtual int selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize);$/;"	p	class:peace::net::UdpClient	access:public	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::UdpServer	net/udp/udpServer.h	/^class UdpServer : public Udp   $/;"	c	namespace:peace::net	inherits:Udp
peace::net::UdpServer::BufServer	net/udp/udpServer.cpp	/^void* UdpServer::BufServer(void* arg)$/;"	f	class:peace::net::UdpServer	signature:(void* arg)
peace::net::UdpServer::BufServer	net/udp/udpServer.h	/^	static void* BufServer(void* arg);$/;"	p	class:peace::net::UdpServer	access:public	signature:(void* arg)
peace::net::UdpServer::UdpServer	net/udp/udpServer.cpp	/^UdpServer::UdpServer()$/;"	f	class:peace::net::UdpServer	signature:()
peace::net::UdpServer::UdpServer	net/udp/udpServer.h	/^	UdpServer();$/;"	p	class:peace::net::UdpServer	access:public	signature:()
peace::net::UdpServer::_LockChain	net/udp/udpServer.h	/^	pthread_mutex_t _LockChain;$/;"	m	class:peace::net::UdpServer	access:private
peace::net::UdpServer::_LockData	net/udp/udpServer.h	/^	pthread_mutex_t _LockData;$/;"	m	class:peace::net::UdpServer	access:private
peace::net::UdpServer::_LockSend	net/udp/udpServer.h	/^	pthread_mutex_t _LockSend;$/;"	m	class:peace::net::UdpServer	access:private
peace::net::UdpServer::_bufServer	net/udp/udpServer.cpp	/^void UdpServer::_bufServer()$/;"	f	class:peace::net::UdpServer	signature:()
peace::net::UdpServer::_bufServer	net/udp/udpServer.h	/^	void _bufServer();$/;"	p	class:peace::net::UdpServer	access:public	signature:()
peace::net::UdpServer::_bufServerPid	net/udp/udpServer.h	/^	pthread_t _bufServerPid;$/;"	m	class:peace::net::UdpServer	access:private
peace::net::UdpServer::_lockSemNotFinishInit	net/udp/udpServer.h	/^	int _lockSemNotFinishInit;$/;"	m	class:peace::net::UdpServer	access:private
peace::net::UdpServer::_recvDataBuf	net/udp/udpServer.h	/^	RecvData *_recvDataBuf;$/;"	m	class:peace::net::UdpServer	access:private
peace::net::UdpServer::_recvDataBufLast	net/udp/udpServer.h	/^	RecvData *_recvDataBufLast;$/;"	m	class:peace::net::UdpServer	access:private
peace::net::UdpServer::_recvDataUdp	net/udp/udpServer.h	/^	RecvData *_recvDataUdp;$/;"	m	class:peace::net::UdpServer	access:private
peace::net::UdpServer::_recvServerEpoll	net/udp/udpServer.cpp	/^void UdpServer::_recvServerEpoll()$/;"	f	class:peace::net::UdpServer	signature:()
peace::net::UdpServer::_recvServerEpoll	net/udp/udpServer.h	/^	void _recvServerEpoll();$/;"	p	class:peace::net::UdpServer	access:public	signature:()
peace::net::UdpServer::_recvServerPid	net/udp/udpServer.h	/^	pthread_t _recvServerPid;$/;"	m	class:peace::net::UdpServer	access:private
peace::net::UdpServer::_sock	net/udp/udpServer.h	/^	int _sock;$/;"	m	class:peace::net::UdpServer	access:private
peace::net::UdpServer::_taskSem	net/udp/udpServer.h	/^	sem_t  _taskSem;$/;"	m	class:peace::net::UdpServer	access:private
peace::net::UdpServer::recvServerEpoll	net/udp/udpServer.cpp	/^void* UdpServer::recvServerEpoll(void *arg)$/;"	f	class:peace::net::UdpServer	signature:(void *arg)
peace::net::UdpServer::recvServerEpoll	net/udp/udpServer.h	/^	static void* recvServerEpoll(void* arg);$/;"	p	class:peace::net::UdpServer	access:public	signature:(void* arg)
peace::net::UdpServer::selfBind	net/udp/udpServer.cpp	/^int UdpServer::selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::UdpServer	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::UdpServer::selfBind	net/udp/udpServer.h	/^	virtual int selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize);$/;"	p	class:peace::net::UdpServer	access:public	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
peace::net::UdpServer::start	net/udp/udpServer.cpp	/^int UdpServer::start(const char *ip, const int port)$/;"	f	class:peace::net::UdpServer	signature:(const char *ip, const int port)
peace::net::UdpServer::start	net/udp/udpServer.h	/^	virtual int start(const char *ip, const int port);	$/;"	p	class:peace::net::UdpServer	access:public	signature:(const char *ip, const int port)
peace::net::UdpServer::stop	net/udp/udpServer.cpp	/^void UdpServer::stop()$/;"	f	class:peace::net::UdpServer	signature:()
peace::net::UdpServer::stop	net/udp/udpServer.h	/^	virtual void stop();	$/;"	p	class:peace::net::UdpServer	access:public	signature:()
peace::net::UdpServer::~UdpServer	net/udp/udpServer.cpp	/^UdpServer::~UdpServer()$/;"	f	class:peace::net::UdpServer	signature:()
peace::net::UdpServer::~UdpServer	net/udp/udpServer.h	/^	~UdpServer();	$/;"	p	class:peace::net::UdpServer	access:public	signature:()
peace::queuet	base/queue/queue.cpp	/^void queuet()$/;"	f	namespace:peace	signature:()
peace::queuet	base/queue/queue.h	/^void queuet();$/;"	p	namespace:peace	signature:()
queueInit	peaceInterface.cpp	/^int queueInit(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)$/;"	f	signature:(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)
queueInit	peaceInterface.h	/^int queueInit(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize);$/;"	p	signature:(BlockInfo *pBlockInfo, const int blockNum, const int blockTotalSize)
queuePop	peaceInterface.cpp	/^int queuePop(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeout)$/;"	f	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeout)
queuePop	peaceInterface.h	/^int queuePop(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeout);$/;"	p	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg, int(*loopConditionFunc)(void *arg), void* argTimeout, const int timeout)
queuePopInternal	peaceInterface.cpp	/^int queuePopInternal(BlockInfo *pBlockInfo, const T& pFunc, void* arg)$/;"	f	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg)
queuePopInternal	peaceInterface.h	/^int queuePopInternal(BlockInfo *pBlockInfo, const T& pFunc, void* arg);$/;"	p	signature:(BlockInfo *pBlockInfo, const T& pFunc, void* arg)
queuePush	peaceInterface.cpp	/^int queuePush(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)$/;"	f	signature:(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)
queuePush	peaceInterface.h	/^int queuePush(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize);$/;"	p	signature:(BlockInfo *pBlockInfo, const unsigned char *pData, const int iSize, const unsigned char *pFrontData, const int iFrontSize)
queuet	base/queue/queue.cpp	/^void queuet()$/;"	f	namespace:peace	signature:()
queuet	base/queue/queue.h	/^void queuet();$/;"	p	namespace:peace	signature:()
queuet2	base/queue/queue.cpp	/^void queuet2()$/;"	f	namespace:peace::base	signature:()
queuet2	base/queue/queue.h	/^void queuet2();$/;"	p	namespace:peace::base	signature:()
recvServerEpoll	net/udp/udpServer.cpp	/^void* UdpServer::recvServerEpoll(void *arg)$/;"	f	class:peace::net::UdpServer	signature:(void *arg)
recvServerEpoll	net/udp/udpServer.h	/^	static void* recvServerEpoll(void* arg);$/;"	p	class:peace::net::UdpServer	access:public	signature:(void* arg)
registerBusinessDealFunc	net/base/netBase.cpp	/^void NetBase::registerBusinessDealFunc(const NetBusinessDealFuncType pFunc)$/;"	f	class:peace::net::NetBase	signature:(const NetBusinessDealFuncType pFunc)
registerBusinessDealFunc	net/base/netBase.h	/^	void registerBusinessDealFunc(const NetBusinessDealFuncType pFunc);$/;"	p	class:peace::net::NetBase	access:public	signature:(const NetBusinessDealFuncType pFunc)
sSRC	makefile	/^sSRC = $(shell find $(DIR) -name "*.s")$/;"	m
selfBind	net/udp/udp.h	/^	virtual int selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize) = 0;$/;"	p	class:peace::net::Udp	access:public	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
selfBind	net/udp/udpClient.cpp	/^int UdpClient::selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::UdpClient	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
selfBind	net/udp/udpClient.h	/^	virtual int selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize);$/;"	p	class:peace::net::UdpClient	access:public	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
selfBind	net/udp/udpServer.cpp	/^int UdpServer::selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::UdpServer	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
selfBind	net/udp/udpServer.h	/^	virtual int selfBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize);$/;"	p	class:peace::net::UdpServer	access:public	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
serverBind	net/udp/udp.cpp	/^int Udp::serverBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	class:peace::net::Udp	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
setChainSize	net/base/netBase.cpp	/^void NetBase::setChainSize(const int chainSize)$/;"	f	class:peace::net::NetBase	signature:(const int chainSize)
setChainSize	net/base/netBase.h	/^	void setChainSize(const int chainSize);	$/;"	p	class:peace::net::NetBase	access:public	signature:(const int chainSize)
soFLAGS	makefile	/^soFLAGS = -fPIC $/;"	m
start	net/base/netBase.h	/^	virtual int start(const char *ip, const int port) = 0;$/;"	p	class:peace::net::NetBase	access:public	signature:(const char *ip, const int port)
start	net/udp/udpServer.cpp	/^int UdpServer::start(const char *ip, const int port)$/;"	f	class:peace::net::UdpServer	signature:(const char *ip, const int port)
start	net/udp/udpServer.h	/^	virtual int start(const char *ip, const int port);	$/;"	p	class:peace::net::UdpServer	access:public	signature:(const char *ip, const int port)
stop	net/base/netBase.h	/^	virtual void stop() = 0;	$/;"	p	class:peace::net::NetBase	access:public	signature:()
stop	net/udp/udpServer.cpp	/^void UdpServer::stop()$/;"	f	class:peace::net::UdpServer	signature:()
stop	net/udp/udpServer.h	/^	virtual void stop();	$/;"	p	class:peace::net::UdpServer	access:public	signature:()
threadClose	base/thread/thread.cpp	/^void threadClose(pthread_t &pid)$/;"	f	namespace:peace::base	signature:(pthread_t &pid)
threadClose	base/thread/thread.h	/^void threadClose(pthread_t &pid);$/;"	p	namespace:peace::base	signature:(pthread_t &pid)
threadClose	peaceInterface.cpp	/^void threadClose(pthread_t &pid)$/;"	f	signature:(pthread_t &pid)
threadClose	peaceInterface.h	/^void threadClose(pthread_t &pid);$/;"	p	signature:(pthread_t &pid)
threadCreate	base/thread/thread.cpp	/^int threadCreate(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size)
threadCreate	base/thread/thread.h	/^int threadCreate(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size);$/;"	p	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg, const size_t stack_size)
threadCreate	peaceInterface.cpp	/^int threadCreate(pthread_t &pid, void*(*threadCallback)(void*), void *arg, const size_t stackSize)$/;"	f	signature:(pthread_t &pid, void*(*threadCallback)(void*), void *arg, const size_t stackSize)
threadCreate	peaceInterface.h	/^int threadCreate(pthread_t &pid, void*(*threadCallback)(void*), void *arg, const size_t stackSize);$/;"	p	signature:(pthread_t &pid, void*(*threadCallback)(void*), void *arg, const size_t stackSize)
threadCreateLarge	base/thread/thread.cpp	/^int threadCreateLarge(pthread_t &pid, void*(*thread_callback)(void*), void *arg)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
threadCreateMiddle	base/thread/thread.cpp	/^int threadCreateMiddle(pthread_t &pid, void*(*thread_callback)(void*), void *arg)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
threadCreateSmall	base/thread/thread.cpp	/^int threadCreateSmall(pthread_t &pid, void*(*thread_callback)(void*), void *arg)$/;"	f	namespace:peace::base	signature:(pthread_t &pid, void*(*thread_callback)(void*), void *arg)
udpBind	net/common/common.cpp	/^int udpBind(UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	signature:(UdpUserType type, const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
udpClientBind	net/common/common.cpp	/^int udpClientBind(const char *ip, const int sendBufSize, const int recvBufSize)$/;"	f	signature:(const char *ip, const int sendBufSize, const int recvBufSize)
udpServerBind	net/common/common.cpp	/^int udpServerBind(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)$/;"	f	signature:(const char *ip, const int nPort, const int sendBufSize, const int recvBufSize)
wr	base/file/simpleSaveFile.cpp	/^void SaveFile::wr(const void *data, const int dataSize)$/;"	f	class:peace::base::SaveFile	signature:(const void *data, const int dataSize)
wr	base/file/simpleSaveFile.h	/^	void wr(const void *data, const int dataSize);$/;"	p	class:peace::base::SaveFile	access:public	signature:(const void *data, const int dataSize)
~NetBase	net/base/netBase.cpp	/^NetBase::~NetBase()$/;"	f	class:peace::net::NetBase	signature:()
~NetBase	net/base/netBase.h	/^	~NetBase();$/;"	p	class:peace::net::NetBase	access:public	signature:()
~SaveFile	base/file/simpleSaveFile.cpp	/^SaveFile::~SaveFile()$/;"	f	class:peace::base::SaveFile	signature:()
~SaveFile	base/file/simpleSaveFile.h	/^	~SaveFile();$/;"	p	class:peace::base::SaveFile	access:public	signature:()
~Udp	net/udp/udp.cpp	/^Udp::~Udp()$/;"	f	class:peace::net::Udp	signature:()
~Udp	net/udp/udp.h	/^	~Udp();	$/;"	p	class:peace::net::Udp	access:public	signature:()
~UdpServer	net/udp/udpServer.cpp	/^UdpServer::~UdpServer()$/;"	f	class:peace::net::UdpServer	signature:()
~UdpServer	net/udp/udpServer.h	/^	~UdpServer();	$/;"	p	class:peace::net::UdpServer	access:public	signature:()
